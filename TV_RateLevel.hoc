/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
 *   TV_Notch.hoc
 *   
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */


load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")

xopen("Params.hoc")           // default parameters
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template
xopen("parameters_TV_RateLevel.hoc")     //This model's parameters
xopen("CochlearNucleus.hoc")         // model set-up
xopen("spike_stats.hoc")  // PSTHcell and meanrate procedures


//--- Setup Auditory and CN Stellate model
create_cells()
connect_cells(fileroot)
connect_CNcells(fileroot)
//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc")
xopen("pvec_DS_RateLevel.hoc")

reset_weights()
RefreshCellparams()

//Require 2 TV units with CF = f(position 50)
objref tuberculoventral[1][2]


//Setup this experiment
xopen("par_experiment_TV_RateLevel.hoc")
xopen("cngui.hoc")



param.tv_erev=-65
param.offset=0
param.n.x[ds][tv] = 20
param.bw.x[ds][tv] = 15

create_connect_TV(fileroot)




//xopen("TV_Notch.ses")

objref fitgr,gg
//TV Optimisation
objref gr,target_ratelevel, dslist, fvec,dvec,ivec,weighting,errorvec
objref anrate[nchannels],rate_level_graph
gr = new Graph()


//
// Fitness/error function
//
proc plot_fitgr(){
    objref fitgr
    fitgr = new Graph()
//    expected_notch[1].plot(fitgr,freq1_notch,4,1)
//    CNrate[tv].plot(fitgr,cf,3,1)
//    type2_1oct_sweep[1].plot(fitgr,freq_1oct,5,1)
//    fitgr.exec_menu("View = plot")
}

objref templevel,indlevel,errorvec,refvec

reps=20
strdef origfileroot
origfileroot = fileroot

error=0
strdef datestr,grlbl
objref ivec //,pval[NPARAMS]
ivec= new Vector()
ivec.append(3,9,7,5,1,2,8,6,4,0,10,11,12,13)







level_offset=25


/*
TV_BFtone()
level=new Vector(20)
level.indgen().mul(3).add(20) //20:3:60
Ratelevel()
TV_Noise()
level=new Vector(20)
level.indgen().mul(2).add(50)
Ratelevel()
*/


for i = 0, nchannels-1 {
	dstellate[i][0].soma.gnabar_rm=0.408307 
	dstellate[i][0].soma.gkhtbar_rm=0.030623 
	dstellate[i][0].soma.gleak_rm=0.000274146 
	dstellate[i][0].soma.erev_rm=-65 
	dstellate[i][0].soma.ghbar_rm=0.000427944
	dstellate[i][0].soma.gkltbar_klt=0.0163897
}

param.w.x[lsr][tv] = 0.0021707
param.w.x[hsr][tv] = 0.0006168

param.w.x[glg][ds]	= 0.000532	
param.w.x[hsr][ds]	= 0.00127  
param.w.x[lsr][ds]	= 0.00309  
param.w.x[tv][ds]	= 0.00  
param.w.x[ds][tv]	= 0.0018  
reset_weights()



//QuickRun()
//spl=50
//sprint(fileroot,"%s_spl50",origfileroot)
//param.w.x[hsr][tv]=-0.0002
//param.w.x[lsr][tv]*=2
objref origpvec
//set_pvec()
//origpvec = pvec.c



//TV_BFtone()
//level=new Vector(20)
//level.indgen().mul(3).add(20) //20:3:60
//Ratelevel()
//TV_Noise()
//level=new Vector(20)
//level.indgen().mul(2).add(50) //50:2:88
//Ratelevel()


dt=0.1
//QuickRun()


//xopen("TV_RateLevel/pvec_TV_RateLevel.hoc")
set_pvec()
reps=10
runprax()
runprax()
//reps=5
runprax2()

reps=50
printprax2()



