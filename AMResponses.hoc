/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/* Simulate reponses for chapter 4 of my thesis
 *  AM Responses.hoc
 *  Generate RL,NRL,RA, MTF
 *
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */

load_file("nrngui.hoc")

xopen("Params.hoc")
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template

//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc") 
xopen("pvec_DS_RateLevel.hoc")
xopen("pvec_TV_Notch.hoc")
xopen("pvec_TV_RateLevel.hoc")
xopen("parameters_Responses.hoc")

//--- Setup CN Stellate Network model
xopen("CochlearNucleus.hoc")         // model set-up
xopen("spike_stats.hoc")
xopen("calcisilag.hoc")
xopen("jitter.hoc")
//Parameters for this optimisation
xopen("parameters_TStellate.hoc")

use_ball_stick=1
fileroot="AMResponses2"
create_cells()
connect_cells(fileroot)
connect_CNcells(fileroot)


xopen("par_experiment_TStellate2.hoc") //needed for CS_data(), CT1_data() and CT2_data()

whichcell=50
strdef targetcell
targetcell="cn.tstellate[whichcell]"


// channel position -> tonefreq

xopen("cngui.hoc")
xopen("ResponsesRoutines.hoc")



/*********Default Parameters *************/
ANmodel	     = 7 //Zilany Bruce model (Zilany et al, 2009)
species      = 1 //Cat
audiogram_file	= "cat_audiogram.txt"
usesavedfilterbanks = 1
ANsoundspath = "../sounds"  //local sounds path
nrep         = 1               //nrep is number of reps of stimulus
cfhi         = 40000
cflo         = 200
srate        = 100000.0
stimtdres    = 1/srate
sg_rate      = 50000
sg_tdres     = 1/sg_rate
RefreshCF()
/****************************************/




proc AMresponse_CS(){
    CS_data()
    xopen("pvec_TStellate2_CS.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    binwidth=0.1
    reps=50
    ModulationTransferFunction(tonefreq)
    F0_Response(tonefreq)
}


proc AMresponse_CT1(){
    CT1_data()
    xopen("pvec_TStellate2_CT1.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    binwidth=0.1
    reps=50
    F0_Response(tonefreq)
//    ModulationTransferFunction(tonefreq)
}

proc AMresponse_CT2(){
    CT2_data()
    xopen("pvec_TStellate2_CT2.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    binwidth=0.1
    reps=50
    ModulationTransferFunction(tonefreq)
    F0_Response(tonefreq)
}



proc SimpleResponses_CS(){
    CS_data()
    xopen("pvec_TStellate2_CS.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    RateLevelFunction()
    NoiseRateLevelFunction()
    MaskedRateLevelFunction()
   MaskedResponseCurve()
}

proc SimpleResponses_CT1(){
    CT1_data()
    xopen("pvec_TStellate2_CT1.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    RateLevelFunction()
    NoiseRateLevelFunction()
    MaskedRateLevelFunction()
    MaskedResponseCurve()
}

proc SimpleResponses_CT2(){
    CT2_data()
    xopen("pvec_TStellate2_CT2.hoc")
    connect_cells(fileroot)
    connect_CNcells(fileroot)
    RefreshCellParams()
    RateLevelFunction()
    NoiseRateLevelFunction()
    MaskedRateLevelFunction()
    MaskedResponseCurve()
}



