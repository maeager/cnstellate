/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */
// experiment_ClickDelay.hoc
// Cochlear Nucleus network model: experiment file



forall {Ra = 150 cm=0.9}
// *** Set-up recording
objref dsvec, tvec, vstel, vtv , iclamp
record_step		= 0.1
record_vec_size = int(tstop/record_step)+1
dsvec			= new Vector(record_vec_size)
tvec			= new Vector(record_vec_size)
vstel			= new Vector(record_vec_size)
vtv				= new Vector(record_vec_size)
iclamp			= new Vector(record_vec_size)
record_step		= 0.1
dsvec.record(&dstellate[icentre][0].soma.v(0.5),record_step)
 tvec.record(&t,record_step)
 vstel.record(&tstellate[icentre][0].soma.v(0.5),record_step)
vtv.record(&tuberculoventral[icentre][0].soma.v(0.5),record_step)
 //iclamp.record(&vclamp.i,record_step)


// *** Process data and print out results
xopen("calcisilag.hoc") // everybody needs this for the post_results

proc print_results() {
  print_raster(fileroot)
  print_an_raster(fileroot)
  print_an_hist(1,fileroot)
  sprint(filename,"%s.curvs",fileroot)
  outfile.wopen(filename)
  take_record()
  for i = 0, tvec.size()-1 {
  if (i>=dsvec.size() || i>=vstel.size() || i>=vtv.size()) break
    outfile.printf("%8.3g %8.3g %8.3g %8.3g \n",tvec.x[i],dsvec.x[i],vstel.x[i],vtv.x[i])
  }
  outfile.close()
  print "Results printed to files"
}

proc SetRates(){
   an.SetRates()
   for i=0,99 golgi[i][0].SetRate()   
}

proc GenInputSpikes(){local i
   an.GenSpikes()
   for i=0,99 golgi[i][0].GenSpikes()
}

objref gr,targetclick, dslist,clicktimes,stim
proc ClickDelay(){local i,j,count,sum,channel,hi,lo,runtime,modfreq
   

   runtime				= startsw()
   an.ClearSpikes()      
   cfhi					=64000
   cflo					=200
   usesavedfilterbanks	=1
   dur					= 0.08    //duration of stim (seconds)
   srate				= 500000.0  
   stimtdres			= 1/srate
   sg_rate				= 500000      
   sg_tdres				= 1/sg_rate
   stimdelay			= 0.01      //sec
   stimtype				= 2      //Silence
   reps					= 25
   ANmodel				= 6      //Zilany Bruce model
   species				= 2      //Rat
   nrep					= 1        //nrep is number of reps of stimulus
   objref gr,targetclick, dslist,clicktimes,stim


   clicktimes = new Vector()
   clicktimes.append(20,22,40,44,60,68).mul(srate/1000)


   
   //Target response
   //Fraction of repetitions that ellicit a response
   targetclick = new Vector()
   targetclick.append(1,0.2,1,0.45,1,0.6)

   //Create the stimulus
   RefreshParameters()
   stim = new Vector(int(dur/stimtdres),0)
   for i=0,clicktimes.size-1{//click width=20/srate
      for j=0,20 stim.x[clicktimes.x[i]+j] = spl2ampl(80)
   }
   
   ANFilterBankRun()
   SetRates()
   GenInputSpikes()
   //run()   

}



xpanel("Click Delay")
xbutton("Click Delay", "ClickDelay()")
xbutton("Plot FSL mean", "ClickDelayPlot()")
xpanel()


//ClickDelay()


objref gr, targetrl, rlst,level,isi,ind
level = new Vector(22)
level.indgen().mul(5).add(-15)
targetrl = new Vector()
targetrl.append(2.53,   2.14,   4.28,   6.24,   7.80,   12.10,   10.73,   13.47,   17.96,27.92,30.27,   32.81,   39.84,   51.75,   57.42,   58.00,   58.79,   62.11,   68.75,   82.62,   92.38,   100.78)
gr = new Graph()
rlst = new List()
targetrl.plot(gr,level,2,2)
gr.size(-20,100,0,150)
gr.exec_menu("View = plot")
gr.exec_menu("Keep Lines")


objref g, dvec, fvec,ivec
g = new Graph()
g.size(0,3,0,3)
count = 0
func fun() {local f,mspikerate
       if ($1 == 90) {
                g.line($2*$3, $3*$4)
                g.flush()
      doNotify()
//      print "spl ", $1,"a (scaling) ", $2,"b (stdev) ", $3
      }

   if ($1 == -15 && count != 0){
      fvec.plot(Graph[0],ivec,1,1)
      Graph[0].flush()
      doNotify()
   }
   spl=$1
   //weight_sum=$2
   golgi_spon=$2
   golgi_spatial_filter_stdev =$3
   golgi_syn_filter_scale_factor=$4
   runtime = startsw()
   golgi[76][0].ClearSpikes()
   tonefreq = cf.x[76]
   RefreshParameters()
   sg_rate=50000
   ANFilterBankRun()
   sg_rate = 50000
   sg_tdres = 1/sg_rate
   CreateGolgiSynFilter()
   golgi[76][0].SetRate()

   for j=0, reps-1{
      golgi[76][0].GenSpikes()
      print j
      golgi[76][0].SaveSpikes()
      //print startsw()-x, "secs"
   }

   runtime = startsw()-runtime
   print "Simulation took ",runtime, " secs "
   mspikerate = meanrate(golgi[76][0].spikes)
   print "Mean: ",mspikerate , " stdev: ", isistdev
   return mspikerate //golgi[76][0].spikes.size()/(reps*0.05)

}


objref vv,dvec,ivec,fvec
dvec = new Vector()
ivec = new Vector()
reps = 50

dvec 
ivec 

a = 1.5
b = 4
c = 1

proc RunFit(){
g.beginline()
error = dvec.fit(fvec, "fun", ivec, &a, &b, &c)
print a, b, c, error
g.flush()
g.exec_menu("View = plot")
fvec.plot(g,ivec,1,1)
}
