/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
*    spike_stats.hoc contains:
*    1. PSTHcell function that calculates first 
*    spike latency, inter-spike interval statistics (histogram, binned 
*    mean, binned stdev, binned co-efficient of variation)
*    2. meanrate() takes in a spike list and calculates the mean firing rate between 
* 
*    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
*
*    This file is part of cnstellate.
*  
*    This is free software: you can redistribute it and/or modify
*    it under the terms of the GNU General Public License as published by
*    the Free Software Foundation, either version 3 of the License, or
*    (at your option) any later version.
*
*    This is distributed in the hope that it will be useful,
*    but WITHOUT ANY WARRANTY; without even the implied warranty of
*    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*    GNU General Public License for more details.
*
*    You should have received a copy of the GNU General Public License
*    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
*/


strdef pstlbl
objref pstg, pstv[3], fsl,  fs, psth, fslg
objref uISI, sISI,ISIg, cvISI,u1,s1, CVgr, ISIHg, ISI,ISIH

objref bins[1]

cvmean = 0

/*
* PlotLine
* 
*/
objref indvec
proc PlotLine(){local i,j, lineon, markon//vector,graph, label,  color, binsize
    objref indvec
    indvec = $o1.c.indvwhere($o1, ">", 0)
    lineon = 0
    markon = 1
    for i = 0, $o1.size()-1{
		if ($o1.x[i] > 0 ){
            if (lineon==0) {
				lineon = 1
				$o2.beginline("", $4, 0)
				$o2.line(i*$5,$o1.x[i])
            }else {
				$o2.line(i*$5,$o1.x[i])
            }
		}else {
            if (lineon==1){
				$o2.line(i*$5,$o1.x[i-1])
				$o2.flush()
				lineon = 0
            }
		}
    }
}

psth_stimdur_mode=0
checkedtrials=0   
proc PSTHcell() {local i, j, sp1, sp2, index, intv,first, cvmean, count,sizebins localobj checkspikes
    objref pstg, pstv[3],psth
	objref bins[1]
    objref uISI, sISI,ISIg,  fs, fsl,fslg, cvISI,u1,s1, CVgr, ISIHg, ISI,ISIH
    //$o1  is the Spike List
    //$2 is binsize in msec
    //$3 is graphing flag : 0 no graphs generated, 1 graphs generated
    print "PSTHcell: ", $o1, $2, $3 
    for i = 0, 2 { pstv[i] = new Vector()}
    count = 0
    checkspikes= new Vector()
    //Create PSTH: Remove spikes before stimulus and adjust times relative to onset
    for i=0, $o1.count()-1{
		if ($o1.object(i).size() ==0) { continue }
		for j= 0 , $o1.object(i).size()-1 {
            sp1 = $o1.object(i).x[j]
            if ((sp1 >= stimdelay*1000) ){ 
				pstv[0].append(sp1-stimdelay*1000)
				count +=1
            }
		}
    }
    print "PSTHcell: total spikes", count
    if(pstv[0].size < 1) {
		print "Empty PSTH created"
		if (psth_stimdur_mode==0){
			pstv[1] = new Vector(int(tstop/$2)+1,0) 
			psth = new Vector(int(tstop/$2)+1,0) 
		}else {
			pstv[1] = new Vector(int((dur+ramplngth)/$2*1000 +1),0)
			psth = new Vector(int((dur+ramplngth)/$2*1000 +1),0)   
		} 
    }else {   
		print "PSTHcell: created, binwidth ", $2, " rate normalise factor ", reps*$2/1000 
		
		if (psth_stimdur_mode==0){
			pstv[1] = pstv[0].histogram(0, tstop ,$2)  
			psth = pstv[1].c.div(reps*$2/1000)    
		}else {
			pstv[1] = pstv[0].histogram(0, (dur + ramplngth)*1000 ,$2)  
			psth = pstv[1].c.div(reps*$2/1000)    
		} 
		
    }
    
    sizebins = pstv[1].size()
    sprint(pstlbl, "objref bins[%d]",sizebins )
    execute1(pstlbl)
    for i = 0, sizebins - 1 { bins[i] = new Vector()}
    
    print "PSTHcell: Gather ISI and place value in first spike's bin"
    uISI = new Vector( sizebins, 0)
    sISI = new Vector(sizebins, 0)
    cvISI = new Vector(sizebins, 0)
    fs = new Vector()
    ISI = new Vector()
    index = 0    
    checkedtrials = 0
    for i=0, $o1.count()-1 {
		first = 0
		//print "PSTHcell: Go through spike train only if first three spikes occur in first 15 ms"
        checkspikes.indvwhere($o1.object(i),"[]",stimdelay*1000 +  2.5, stimdelay*1000 + 17.5)
        if(checkspikes.size() >= 3) {
			// Go through spike train only if no spikes occur immediately before stimulus evoked spike
			//checkspikes.indvwhere($o1.object(i),"[]",stimdelay*1000 - 5 ,stimdelay*1000 + 2.5)
			//if(checkspikes.size() == 0) {
			checkedtrials+=1
			print "PSTHcell: count intervals"
			for j = 0, $o1.object(i).size() - 2 {
				sp1 = $o1.object(i).x[j]-stimdelay*1000
				if (sp1 <= param.delay.x[hsr][ds]) {
					if ($o1.object(i).size() <=1) { 
						break 
					}else{
						continue 
					}
				}else{   
					index = int(sp1/$2)
					if (index >= sizebins-2) {
						break 
					}
					if (first == 0) {
						fs.append(sp1)
						first = 1
					}
					if ($o1.object(i).size() <=1) { 
						break 
					}
					sp2 = $o1.object(i).x[j+1]-stimdelay*1000
					if (sp2 > (dur+ramplngth)*1000) {
						break 
					}
					
					intv = sp2-sp1
					bins[index].append(intv)
					ISI.append(intv)
				}
			} //checked trials: no spikes beforehand,
			//} //checked trials:  min 3 spikes in first 15 ms
		}
    }
    
    print "PSTHcell: Intervals done. Checked trials: ", checkedtrials	
    cv1 = 0
    cvmean = 0
    for i = 0, sizebins-2 {
		if(bins[i].size() >= 3){
            uISI.x[i] = (bins[i].mean())
			if (bins[i].size > 2){
				sISI.x[i] = (bins[i].stdev())
			}
            if((sISI.x[i]>1e-6)&&(uISI.x[i]>1e-6)){
				cvISI.x[i] = sISI.x[i]/uISI.x[i]
				cvmean += cvISI.x[i]
				cv1+=1
            }
		}
		
    }
    if (cv1 > 1) {cvmean /=cv1 }else{ cvmean = 0}
    ISIH = ISI.histogram(0,20, dt)
    print "PSTHcell: CV measured, mean ", cvmean
	
    //Abeles (1982) Quantification, smoothing and confidence limits for
    //single units' histograms J. Neurosci. Methods 5:317-325
    if (ISIH.sum() >= 1){ISIH.mul(1000/(reps*dt*ISIH.sum()))}
	
	print "PSTHcell: counting FSL "
	
    fslmean = 0
    fslstd = 0
    if (fs.size() >1){
		fsl = fs.histogram(0,20, dt)
		fslmean = fs.mean()
		if (fs.size > 2) {
			fslstd = fs.stdev()
		}
    } else{ 
        fsl = new Vector()
    }
    print "FSL mean ", fslmean, " std ", fslstd 
   doNotify()
   flushf()
	
    if (($3 >= 1) &&  (pstv[0].size >= 1)) {
        print "PSTHcell: plotting data, ISIH"
        system("date +%F-%H%M%S", seedstr)
        strobj.left(seedstr, 17)
        
        if (ISI.size > 1){
            ISIHg = new Graph(0)
            ISIHg.view(0, 0, 20, int(ISIH.max()), 260, 52, 320.4, 210.7)
            ISIH.plot(ISIHg,dt)
            ISIHg.label(0.2,0.95, "Inter-Spike Interval Histogram")
            ISIHg.label(0.2, 0.92, "Firing Rate (sp/s)")
            if (ISI.size() > 1 ) {start =  ISI.mean() }else { start = 0}
            if (ISI.size() > 2) { end = ISI.stdev() }else {end = 0 }
            sprint(pstlbl, "Mean %g, Std Dev %g",start,end )
            ISIHg.label(0.3, 0.5, pstlbl)
        } 
        print "PSTHcell: plotting data, FSL"        
        if (fs.size() >1){
            fslg = new Graph(0)
            fslg.view(0, 0, 20, int(fsl.max), 259, 393, 321.3, 206.2)
			//        sprint(pstlbl,"First Spike Latency.  %d(Hz) CF,  ",$o1.cf)
			//        fslg.label(0.2, 0.9, pstlbl)
            fsl.plot(fslg,dt)
            sprint(pstlbl, "Mean %g, Std Dev %g",  fslmean,fslstd)
            fslg.label(0.3, 0.25, pstlbl)
        }
        print "PSTHcell: plotting data, ISI u and sd"
        ISIg = new Graph(0)
        ISIg.view(0, 0,1.1*(dur+ramplngth)*1000, int(uISI.max()), 703, 54, 318.6, 211.6)
        
        ISIg.label(0.1,0.9, "Mean and Standard Deviation of ISI")
        pstlbl="Mean ISI"
        PlotLine(uISI,ISIg, pstlbl, 1, $2)
        PlotLine(sISI, ISIg, "SD ISI", 2, $2)
        print "PSTHcell: plotting data, CV"        
		CVgr = new Graph(0)
        CVgr.view(0, 0, 1.1*(dur+ramplngth)*1000, 1, 704, 397, 319.5, 203.5)
        CVgr.label(0.2,0.95, "Coefficient of Variation")
        PlotLine(cvISI, CVgr, "CV ISI", 3, $2)
        sprint(pstlbl, "Mean CV %f", cvmean)
        CVgr.label(0.2, 0.9, pstlbl)
        
        print "PSTHcell: plotting data, PSTH"
        pstg = new Graph(0)
        pstg.view(0, 0, 1.1*(dur+ramplngth)*1000, psth.max(), 496, 206, 319.5, 224.2)
        psth.plot(pstg, $2)
        
        sprint(pstlbl, "PSTH %s, trials %d, total spikes %d", $o1,  $o1.count(), pstv[0].size)
        pstg.label(0.1, 0.95, pstlbl)
        pstg.label(0.1,0.92,grlbl)
		
	}	
	doNotify()
	flushf()

    if (($3 == 2) &&  (pstv[0].size >= 1)){
		print "PSTHcell: printing data"        
        sprint(pstlbl, "%s/psth_%.2g.dat",fileroot, $2)
		print "Writing psth,isi stats and isih/fsl to file ", pstlbl
		file.wopen(pstlbl)
		if(file.isopen()){
			file.printf("# PSTH analysis in T stellate %d, CF %dHz\n", whichcell, cf.x[whichcell])
			file.printf("# Stimulus %g Hz, %d dB, %d reps\n",tonefreq, spl, reps)
			file.printf("# Binwidth %g\n",$2)
			file.printf("# %s\n",seedstr)
			file.printf("# CV mean %g\n",cvmean)
			file.printf("# Time (ms), Rate (sp/s), mISI (ms), sISI (ms), CV ()\n")

			for i=0,psth.size()-1 {
				file.printf("%8.2f\t%8.4f\n",i*$2, psth.x[i])
			}				
			file.printf("\n\n# CV mean %g\n",cvmean)
			file.printf("# Time (ms), Rate (sp/s), mISI (ms), sISI (ms), CV ()\n")
			for i=0, sizebins - 1  {
				file.printf("%8.2f\t%8.4f\t%8.4f\t%8.4f\n",i, cvISI.x[i],uISI.x[i],sISI.x[i])
			}		
    		file.printf("\n\n# Time (ms), ISIH (sp/s), FSL (ms)\n")
			file.printf("# ISI Mean %g, Std Dev %g Median %g\n",ISIH.mean(),ISIH.stdev(), ISIH.median())
			file.printf("# FSL Mean %g, Std Dev %g Median %g\n",  fs.mean(),fs.stdev(), fs.median())
			for i=0,ISIH.size()-1 {
				file.printf("%8.2f\t%8.4f\t%8.4f\n",i*dt, ISIH.x[i],fsl.x[i])
			}	
			file.close()
		}
		
    }
	
    //objref bins[1],pstv
}

/*
* meanrate (spike list object)
* Take in a spike vector ( presume an appended vector of n-repetition spike trains)
* remove values less than the stimulus delay
* calculate intervals, remove negative intervals,
* mean rate is the inverse of the isi mean
*/

objref ind,isi
isistdev =0
_meanrate=0
func meanrate(){ local i localobj spikes
    objref ind,isi
    spikes = new Vector()
    if ($o1.size < reps*2 ) {
		isistdev = 10
		if ($o1.size() <= 0) return 0
		return $o1.size()/(reps*(dur+ramplngth/2))
    }
    spikes.copy($o1)
    ind = new Vector()
    isi = new Vector()
    ind.indvwhere(spikes,"<",stimdelay*1000)
    if (spikes.size - ind.size <= 5) {
		isistdev = 10
		return spikes.size()/(reps*(dur+ramplngth/2))
    }
	
    if (ind.size > 0) {
		for i=0, ind.size-1 { spikes.remove(ind.x[i]-i) }
    }
    //print "print spikes.size ", spikes.size
    for i=1,spikes.size-1 {
		isi.append( spikes.x[i]-spikes.x[i-1])
    }
    //print "print isi.size ", isi.size
    
    //Remove the negative intervals 
    ind.indvwhere(isi,"<=",0)
    if (isi.size -ind.size <= 3) {
		print "meanrate:  not enough spike intervals, ISI size ", isi.size
		isistdev = 0
		return spikes.size()/(reps*(dur+ramplngth/2))
    }
    if (ind.size > 0) {
		for i=0, ind.size-1 { 
			isi.remove(ind.x[i]-i)
			//		print "removing ", ind.x[i] 
		}
    }
	
	// Remove intervals greater than the length of the stimulus
    ind.indvwhere(isi,">", (dur+ramplngth/2)*1000)
    if (ind.size >= 1) {
		for i=0, ind.size-1 { 
			isi.remove(ind.x[i]-i)
			//			print "removing ", ind.x[i] 
		}
		if (isi.size < 3) {
			print "meanrate:  not enough spike intervals in stimulus region,  ISI size ", isi.size
			
			isistdev = 0
			return spikes.size()/(reps*(dur+ramplngth/2))
		}
    }
    
    isistdev = isi.stdev()
    _meanrate =1000/isi.mean()
    return 1000/isi.mean()
}
