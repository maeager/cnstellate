begintemplate SpikePlot1
public cells, vecs, g, update,spklist
public map, save_data, b, unmap,SaveSpks,FlushSpks
public flush, begin, plot, size, view_count, fastflush, simgraph
external addplot, tstop
objref cells, vecs[1],spklist[1], nc, g, this, y, tobj, b, outlist, nil
strdef tstr, modestr
addline =1
proc init() {
   fwindow = 100
   binwidth = .1
   modestr = "Spikes   "
   mode=1
   y = new Vector(1000)
   cells = $o1
   if (numarg() == 1) {
      build()
      map()
   }
}
proc map() {
   sprint(tstr, "%s for %s", this, cells)
   if (numarg() > 1) {
      b.map(tstr, $2,$3,$4,$5)
   }else{
      b.map(tstr)
   }
   update()
   flush()
}
proc unmap() {
   b.unmap()
   g = nil
}
proc build() {
   b = new VBox(3)
   b.priority(600)
   b.save("")
   b.ref(this)
   b.dismiss_action("unmap()")
   b.intercept(1)
   xpanel("")
   xmenu("Plot")
   xbutton("Update", "update() flush()")
   xradiobutton("Spikes", "pmode(1)", mode==1)
   xradiobutton("Frequency", "pmode(2)", mode==2)
   xradiobutton("Histogram", "pmode(3)", mode==3)
   xmenu()
   xvarlabel(modestr)
   xradiobutton("Incl. Line", "addline=1", addline==1)
   xpvalue("Freq Window (ms)", &fwindow, 1, "flush()")
   xpvalue("Hist Bin (ms)", &binwidth, 1, "flush()")
   xpanel()
   g = new Graph()
   b.intercept(0)
   addplot(this, 1)
   begin()
   pmode(mode)
}
proc pmode() {
   mode = $1
   if (mode == 1) {
      modestr = "Spikes   "
   }else if (mode == 2) {
      modestr = "Frequency"
   }else if (mode == 3) {
      modestr = "Histogram"
   }
   flush()
}


proc update() {local i
   n = cells.count
   if (n == 0) return
   objref vecs[n],spklist[n]
   for i=0, n-1 {
      vecs[i] = new Vector(0)
      spklist[i] = new List()
      tobj = cells.object(i)
      tobj.connect2target(nil, nc)
      sprint(tstr, "%s", tobj)
      vecs[i].label(tstr)
      nc.record(vecs[i])
   }
   objref nc, tobj
}

proc begin() {
}

func view_count() {
   if (g == nil) {
      return 0
   }
   return g.view_count()
}
proc simgraph() {
}
proc plot() {
}
func size() {
   if (numarg() == 4) {
      g.size($1,$2,0,cells.count+1)
      return 1.
   }else{
      return g.size($1)
   }
}
proc fastflush() {}

proc flush() {local i
   if (object_id(g) == 0) return
   g.erase_all
   g.vfixed(1)
   g.label(.9,1)
if (mode == 1) {
   for (i=n-1; i >= 0; i -= 1) {
      y.resize(vecs[i].size).fill(i+1)
      y.label(vecs[i].label)
      y.mark(g, vecs[i], "o", 1, 1, 1)
      if (addline==1) y.line(g, vecs[i], 1, 0)
   }
}else if (mode == 2) {
   for (i=n-1; i >= 0; i -= 1) {
      y = vecs[i].sumgauss(0, tstop, tstop/100, fwindow)
      y.label(vecs[i].label)
      y.mul(1000).line(g, y.c.indgen(0, tstop/100), 1,1)
   }
}else if (mode == 3) {
   for (i=n-1; i >= 0; i -= 1) if (vecs[i].size > 1){
      y = vecs[i].c.deriv(1,1)
      high = y.max
      y = y.sumgauss(0, high, high/50, binwidth)
      y.label(vecs[i].label)
      y.line(g, y.c.indgen(0, high/50), 1,1)
   }
}
   g.flush()
}


proc SaveSpks(){local i
   for i=0, cells.count-1 {
      spklist[i].append(vecs[i].c)
   }
}
proc FlushSpks(){local i
   for i=0, cells.count-1 {
      spklist[i].remove_all()
   }
}

endtemplate SpikePlot1


objref cells,sp

proc makeSpikePlot(){local i
if (object_id(sp)) sp.unmap()
objref cells,sp
cells = new List()
//Single TS cell
if ($1==0) cells.append(cn.tscells[0])
//All TS Cells
if ($1==1) for i = 0, cn.TS_num-1 cells.append(cn.tscells[i])
//ALL CN cells
if ($1==2) cn.Getcells(cells)

sp = new SpikePlot1(cells)
}


strdef pstlbl
objref pstg, pstv[3], fsl,  fs, psth, fslg
objref uISI, sISI,ISIg, cvISI,u1,s1, CVgr, ISIHg, ISI,ISIH

objref bins[1]

cvmean = 0

/******************PlotLine()**********************/
objref indvec
proc PlotLine(){local i,j, lineon, markon//vector,graph, label,  color, binsize
   objref indvec
   indvec = $o1.c.indvwhere($o1, ">", 0)
   lineon = 0
   markon = 1
   for i = 0, $o1.size()-1{
      if ($o1.x[i] > 0 ){
         if (lineon==0) {
            lineon = 1
            $o2.beginline("", $4, 0)
            $o2.line(i*$5,$o1.x[i])
         }else {
            $o2.line(i*$5,$o1.x[i])
         }
      }else {
         if (lineon==1){
            $o2.line(i*$5,$o1.x[i-1])
            $o2.flush()
            lineon = 0
         }
      }
   }
}

//Intermediate Statistical function MeanRate() used by RL and MRA
objref Mspikes[1]
proc MeanRate(){local i, j localobj indices
   objref Mspikes[sp.cells.count]
   for i=0,sp.cells.count-1 { Mspikes[i] = new Vector() }
   indices = new Vector()
   for i=0,sp.cells.count-1{
      for j=0, sp.spklist[i].count()-1{
         indices= new Vector()
         //Trigger spikes to start of stimulus
         indices.indvwhere(sp.spklist[i].object(j),">=",stimdelay*1000)
         sp.spklist[i].object(j).index(sp.spklist[i].object(j),indices)
         sp.spklist[i].object(j).add(-stimdelay*1000)
         Mspikes[i].append(sp.spklist[i].object(j))
      }

   }
}




proc PSTHcell() {local i, j, sp1, sp2, index, intv,first, cvmean, count
   objref pstg, pstv[3],psth
   objref uISI, sISI,ISIg,  fs, fsl,fslg, cvISI,u1,s1, CVgr, ISIHg, ISI,ISIH
   //$o1  is the Cell object, with SpkList
   //$2 is binsize in msec
   //$3 is graphing flag : 0 no graphs generated, 1 graphs generated
   for i = 0, 2 { pstv[i] = new Vector()}
   count = 0

   for i=0, $o1.count()-1{
      if ($o1.object(i).size() ==0) { continue }
      for j= 0 , $o1.object(i).size()-1 {
         sp1 = $o1.object(i).x[j]
         if ((sp1 >= stimdelay*1000) && (sp1 < (stimdelay + dur+ ramplngth)*1000)) {
            pstv[0].append(sp1-stimdelay*1000)
            count +=1
         }
      }
   }
   print $o1, " total spikes", count
   if(pstv[0].size < 1) {
      print "new vecs"
      pstv[1] = new Vector(int((dur+ramplngth)/$2*1000 +1),0)
      psth = new Vector(int((dur+ramplngth)/$2*1000 +1),0)

   }else {   pstv[1] = pstv[0].histogram(0, (dur + ramplngth)*1000, $2)
      psth = pstv[1].c.div(reps*$2/1000)

   }

   j = pstv[1].size()
   sprint(pstlbl, "objref bins[%d]",j )
   execute1(pstlbl)
   for i = 0, pstv[1].size()-1 { bins[i] = new Vector()}

   uISI = new Vector(j, 0)
   sISI = new Vector(j, 0)
   cvISI = new Vector(j, 0)
   fs = new Vector()
   ISI = new Vector()

   for i=0, $o1.count()-1 {
      first = 0
      //
      for j = 0, $o1.object(i).size() - 2 {
         sp1 = $o1.object(i).x[j]-stimdelay*1000
         if (sp1 <= 0) {
             if ($o1.object(i).size() <=1) { break }else{continue }


         }else{   index = int(sp1/$2)
            if (index >= pstv[1].size()-2) {break }
            if (first == 0) {
               fs.append(sp1)
               first = 1
            }
            if ($o1.object(i).size() <=1) { break }
            sp2 = $o1.object(i).x[j+1]-stimdelay*1000
            if (sp2 > (dur+ramplngth)*1000) {break }

            intv = sp2-sp1
            bins[index].append(intv)
            ISI.append(intv)
         }
      }
   }
   cv1 = 0
   cvmean = 0
   for i = 0, pstv[1].size-2 {
      if(bins[i].size() >= 3){
         uISI.x[i] = (bins[i].mean())
         sISI.x[i] = (bins[i].stdev())
         if((sISI.x[i]>1e-6)&&(uISI.x[i]>1e-6)){
            cvISI.x[i] = sISI.x[i]/uISI.x[i]
            cvmean += cvISI.x[i]
            cv1+=1

         }
      }

   }
   if (cv1 > 1) {cvmean /=cv1 }else{ cvmean = 0}
   ISIH = ISI.histogram(0,(dur+ramplngth)*1000, $2)

   //Abeles (1982) Quantification, smoothing and confidence limits for
   //single units' histograms J. Neurosci. Methods 5:317-325
   if (ISIH.sum() >= 1){ISIH.mul(1000/(reps*$2*ISIH.sum()))}
   fslmean = 0
   fslstd = 0
   if (fs.size() >1){
      fsl = fs.histogram(0,(dur+ramplngth)*1000, $2)
      fslmean = fs.mean()
      if (fsl.size > 2) {fslstd = fs.stdev()}
   }else{ fsl = new Vector()}

   if (($3 == 1) &&  (pstv[0].size >= 1)) {

   system("date +%F-%H%M%S", seedstr)
        strobj.left(seedstr, 17)

   if (ISI.size > 1){
      ISIHg = new Graph(0)
      ISIHg.view(0, 0, 1.1*(dur+ramplngth)*1000, int(ISIH.max()), 260, 52, 320.4, 210.7)
      ISIH.plot(ISIHg,$2)
      ISIHg.label(0.2,0.95, "Inter-Spike Interval Histogram")
      ISIHg.label(0.2, 0.92, "Firing Rate (sp/s)")
      if (ISI.size() > 1 ) {start =  ISI.mean() }else { start = 0}
      if (ISI.size() > 2) { end = ISI.stdev() }else {end = 0 }
      sprint(pstlbl, "Mean %g, Std Dev %g",start,end )
      ISIHg.label(0.3, 0.5, pstlbl)
      sprint(pstlbl, "%s_isih%s.eps",seedstr, $o1)
      ISIHg.printfile(pstlbl)
   }

   if (fs.size() >1){
      fslg = new Graph(0)
      fslg.view(0, 0, 1.1*(dur+ramplngth)*1000, int(fsl.max), 259, 393, 321.3, 206.2)
      sprint(pstlbl,"First Spike Latency.  %d(Hz) CF,  ",$o1.cf)
      fslg.label(0.2, 0.9, pstlbl)
      fsl.plot(fslg,$2)
      sprint(pstlbl, "Mean %g, Std Dev %g",  fslmean,fslstd)
      fslg.label(0.3, 0.25, pstlbl)
      sprint(pstlbl, "%s_fsl%s.eps",seedstr, $o1)
      fslg.printfile(pstlbl)
   }

   ISIg = new Graph(0)
   ISIg.view(0, 0,1.1*(dur+ramplngth)*1000, int(uISI.max()), 703, 54, 318.6, 211.6)

   ISIg.label(0.1,0.9, "Mean and Standard Deviation of ISI")
   pstlbl="Mean ISI"
   PlotLine(uISI,ISIg, pstlbl, 1, $2)
   PlotLine(sISI, ISIg, "SD ISI", 2, $2)


   CVgr = new Graph(0)
   CVgr.view(0, 0, 1.1*(dur+ramplngth)*1000, 1, 704, 397, 319.5, 203.5)
   CVgr.label(0.2,0.95, "Coefficient of Variation")
   PlotLine(cvISI, CVgr, "CV ISI", 3, $2)
   sprint(pstlbl, "Mean CV %f", cvmean)
   CVgr.label(0.2, 0.9, pstlbl)


   pstg = new Graph(0)
   pstg.view(0, 0, 1.1*(dur+ramplngth)*1000, psth.max(), 496, 206, 319.5, 224.2)
   psth.plot(pstg, $2)

   sprint(pstlbl, "PSTH %s, CF %5.0f, trials %d, total spikes %d", $o1, $o1.cf, $o1.count(), pstv[0].size)
   pstg.label(0.1, 0.95, pstlbl)
   pstg.label(0.1,0.92,grlbl)




        sprint(pstlbl, "%s_psth%s.eps",seedstr, $o1)
        pstg.printfile(pstlbl)
   sprint(pstlbl, "%s_isi%s.eps",seedstr, $o1)
   ISIg.printfile(pstlbl)
   sprint(pstlbl, "%s_cv%s.eps",seedstr, $o1)
   CVgr.printfile(pstlbl)

   }




}
