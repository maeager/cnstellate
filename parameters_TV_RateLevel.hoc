/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */



// parameters_TV_Notch.hoc
// Cochlear Nucleus network model: parameters file
// based on parameters_odour_baseline.hoc by Andrew Davison
// Michael Eager, University of Melbourne

  nchannels				= 100	   // Total number of frequency channels
  nTSperchannel			= 0	  // number of TS cells in each freq channel
  numTS					= nchannels*nTSperchannel	// total number of TS cells
  nTVperchannel			= 0	  // number of TV cells in each freq channel
  numTV					= nchannels*nTVperchannel	// total number of TV cells
  nDSperchannel			= 1	  // number of DS cells in each freq channel
  numDS					= nchannels*nDSperchannel	// total number of DS cells
  nGperchannel			= 1	  // number of Golgi cells in each freq channel
  numG					= nchannels*nGperchannel   // total number of Golgi cells
  HSRsperchannel		= 50
  MSRsperchannel		= 0
  LSRsperchannel		= 20
  seed					= 0			// seed for random number generator
  thresh				= -20		// mV	// threshold for detecting spikes


  strdef fileroot
  sprint(fileroot,"TV_RateLevel") // root for output filenames

  inputnumber		= 1		   // fixed input file
  stimtype			= 9		   // Two tone 
  tstop				= 120	   // ms   total simulation time
  ttrans			= 20	   // ms,  when calculating statistics, ignore spikes occuring before this time
  cvode.active(0)
  dt				= 0.05		//ms  cannot be any higher than 0.1
  steps_per_ms		= 10
  setdt()
  celsius			= 37
  secondorder		= 2		//Crank-Nicholson Integration method 


  //Optimisation parameters
  print "Optimisation parameters for TV Notch"
  NPARAMS		= 3
  objref pvec,fvec,pvec_ranges,pvec_name,pvec_factor
  pvec			= new Vector()//NPARAMS) //contains the parameters to be fitted
  pvec_ranges	= new Matrix(NPARAMS,2) // (min,max) pairs for each parameter
  pvec_name		= new List() //names of parameters in String list
  pvec_factor	= new Vector() //NPARAMS,1)
  //mul factor
  //for i																=0,NPARAMS-1 pvec_factor.x[i] = 1	
  //min
  for i	=0,NPARAMS-1 pvec_ranges.x[i][0]= 0.00001
  //max
  for i	=0,NPARAMS-1 pvec_ranges.x[i][1]= 0.03
  //Names                                               //Initial values	//Param Factor
  pvec_name.append(new String("param.w.x[lsr][tv]"))	pvec.append(0.00190)	pvec_factor.append(1)
  pvec_name.append(new String("param.w.x[hsr][tv]"))	pvec.append(0.00130)	pvec_factor.append(1)
  pvec_name.append(new String("param.w.x[ds][tv]"))	    pvec.append(0.00170)	pvec_factor.append(1) 
//  pvec_name.append(new String("param.n.x[ds][tv]"))	    pvec.append(0.020 )     pvec_factor.append(1000)	
//  pvec_ranges.x[3][1]=0.2  
//  pvec_ranges.x[3][0]=0.001	


//  pvec_name.append(new String("param.bw.x[ds][tv]"))	pvec.append(0.0008)	pvec_factor.append(1000)
//  pvec_name.append(new String("param.offset"))	pvec.append(0.0021)	pvec_factor.append(1000)
//  pvec_name.append(new String("param.n.x[ds][tv]"))	pvec.x[5]		= 20		
//  pvec_name.append(new String("param.n.x[hsr][tv]"))	pvec.x[6]		= 8		
//  pvec_name.append(new String("param.n.x[lsr][tv]"))	pvec.x[7]		= 12		
//  pvec_name.append(new String("param.w.x[tv][ds]"))	pvec.x[8]		= 0.00090	 




// cmd is a strdef variable that should be used in local routines and not passed across procedures
strdef cmd
proc set_pvec(){local pp
    for pp=0,NPARAMS-1 {
		sprint(cmd,"pvec.x[%d]= %s / %g ",pp,pvec_name.object(pp).s,pvec_factor.x[pp])
		execute1(cmd)
    }
}

proc set_params(){local pp
    for pp=0,NPARAMS-1 {
		sprint(cmd,"%s = %g * %g ",pvec_name.object(pp).s,pvec.x[pp],pvec_factor.x[pp])
		execute1(cmd)
    }
}

proc show_pvec(){local pp
    pvec.printf
    for pp=0,NPARAMS-1 {
		sprint(cmd,"print %s ",pvec_name.object(pp).s)
		execute1(cmd)
	}
}

// for i=0,NPARAMS-1 pvec_name.append(new String())

// proc add_param(){
// 	if ($1 > NPARAMS-1  || $1 < 0) {
// 		print "Error adding parameter to pvec.  Index out of range: 0,", NPARAMS-1
// 		return 0
// 	}
// 	pvec.x[$1] = $2
// 	pvec_name.object($1).s = $s3
// 	pvec_factor.x[$1]   = $4
// 	pvec_ranges.x[$1][0]= $5
// 	pvec_ranges.x[$1][1]= $6
// }

// add_param( 0, 0.001,  "param.w.x[glg][ds]", 1,    0.000001, 0.03)
// add_param( 1, 0.002,  "param.w.x[hsr][ds]", 1,    0.000001, 0.03)
// add_param( 2, 0.003,  "param.w.x[lsr][ds]", 1,    0.000001, 0.03)
// add_param( 3, 0.001592,"dstellate_gkltbar", 10,   0.000001, 0.03)
// add_param( 4, 0.00095,"gaba_decay",         10000,0.000001, 0.03)
// add_param( 5, 0.0007, "gaba_rise",          1000, 0.000001, 0.03)
// add_param( 6, 0.0008, "dstellate_gleak_rm", 1,    0.000001, 0.03)
