/*
 *   DS_ClickRecovery.hoc
 *
 */
load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")
thresh=-20

      xopen("mathslib.hoc")         // mathematical procedures
      xopen("Params.hoc")
      xopen("Utilities.hoc")
      xopen("NetworkParameters.hoc")
      xopen("AuditoryNerve.hoc")
      xopen("par_CNcell.tem")      // CN cell template
      xopen("parameters_DS_ClickRecovery.hoc")           // model parameters
      xopen("CochlearNucleus.hoc")         // model set-up
      xopen("cngui.hoc")

//Preview optimisation parameters
	  xopen("pvec_Golgi_RateLevel.hoc")

proc SetRates(){
   an.SetRates()
   for i=0,99 golgi[i][0].SetRate()
}

proc GenSpikes2(){local i
   // startsw()
    for i=0,hsr2dsAMPAlist.count-1 hsr2dsAMPAlist.object(i).pre.SGfast(1)
    for i=0,lsr2dsAMPAlist.count-1 lsr2dsAMPAlist.object(i).pre.SGfast(1)
    for i=0,glg2dsGABAlist.count-1 glg2dsGABAlist.object(i).pre.SGfast(1)
   //     print stopsw()
}

proc GenSpikes(){local i
  //  startsw()
    for i=30,60{
	for j=0,HSRsperchannel-1 an.HSR[i][j].SGfast(1)
	for j=0,LSRsperchannel-1 an.LSR[i][j].SGfast(1)
	golgi[i][0].GenSpikes()
      }
  //  print stopsw()
}

proc SaveSpikes(){local i
    //an.SaveSpikes()
   //for i=0,99
   i=76
   golgi[i][0].SaveSpikes()
}
proc ClearSpikes(){local i
   an.ClearSpikes()
   for i=0,99 golgi[i][0].ClearSpikes()
}





objref an,golgi[nchannels][1],g, dstellate[nchannels][1]



proc create_cells(){
an = new AuditoryNerve()
for i=0,99 {
   for j = 0, HSRsperchannel-1 an.HSR[i][j] = new SGC_fast(0.5)
   for j = 0, LSRsperchannel-1 an.LSR[i][j] = new SGC_fast(0.5)
   golgi[i][0] = new Golgicell(3,cf.x[i],i,2)
   dstellate[i][0] = new CNcell(2,cf.x[i],i)

}
}

proc connect_cells(){local i,p,target,source,low,high,range,channel,sourcechannel

    print "Connecting cells"
    sprint(filename,"%s.connect",$s1)
    outfile.wopen(filename)

hsr2tsAMPAlist.remove_all()
lsr2tsAMPAlist.remove_all()
hsr2tvAMPAlist.remove_all()
lsr2tvAMPAlist.remove_all()
hsr2dsAMPAlist.remove_all()
lsr2dsAMPAlist.remove_all()
hsr2glgAMPAlist.remove_all()
lsr2glgAMPAlist.remove_all()
glg2dsGABAlist.remove_all()
glg2tsGABAlist.remove_all()
ds2tsGLYlist.remove_all()
ds2tvGLYlist.remove_all()
tv2tsGLYlist.remove_all()
ts2tsAMPAlist.remove_all()
 print "HSR->DS"
if( ( param.n.getval(hsr,ds) > 0 ) && ( nDSperchannel != 0 ) ){
 outfile.printf("\n%d %d\n",hsr,ds)
channel = 50
target = 0
   for i=0, param.n.getval(hsr,ds)-1{
    //Choose source channel
    sourcechannel = random.normal(channel,param.bw.getval(hsr,ds)/2)
    if ((sourcechannel - int(sourcechannel)) > 0.5 ){
        sourcechannel = 1+int(sourcechannel)
    } else { sourcechannel = int(sourcechannel) }
    if (sourcechannel <=0 ) sourcechannel=0
    if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
    //Choose random source from available cells
    source = random.discunif(0,HSRsperchannel-1)
 //print "HSR[",sourcechannel,"][",source,"] connected to DS[",channel,"][",target,"]"
 sprint(cmd, "dstellate[%d][%d].soma hsr2dsAMPAlist.append( new NetCon( an.HSR[%d][%d],  dstellate[%d][%d].AMPA,thresh,param.delay.getval(hsr,ds), param.w.getval(hsr,ds)))",channel,target,sourcechannel,source,channel,target)
        execute1(cmd) //syn id: 0=AMPA, 1= GLY 2= GABAa
   outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)

   }

      p = 100*(channel)/(nchannels)
    printf("\r=== %3d%% ===",p)
    flushf()
    doNotify() // Although this slows down cell creation, the
               // process is so long that we have to allow the
               // user to quit during the creation.

}
 print "LSR->DS"
if( ( param.n.getval(lsr,ds) > 0 ) && ( nDSperchannel != 0 ) ){
 outfile.printf("\n%d %d\n",lsr,ds)
 channel = 50
target = 0
   for i=0, param.n.getval(lsr,ts)-1{
    //Choose source channel
    sourcechannel = random.normal(channel,param.bw.getval(lsr,ds)/2)
    if ((sourcechannel - int(sourcechannel)) > 0.5 ){
        sourcechannel = 1+int(sourcechannel)
    } else { sourcechannel = int(sourcechannel) }
    if (sourcechannel <=0 ) sourcechannel=0
    if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
    //Choose random source from available cells
    source = random.discunif(0,LSRsperchannel-1)
 //print "LSR[",sourcechannel,"][",source,"] connected to DS[",channel,"][",target,"]"
 sprint(cmd, "dstellate[%d][%d].soma lsr2dsAMPAlist.append( new NetCon( an.LSR[%d][%d],  dstellate[%d][%d].AMPA, thresh,param.delay.getval(lsr,ds), param.w.getval(lsr,ds)))",channel,target,sourcechannel,source,channel,target)
        execute1(cmd) //syn id: 0=AMPA, 1= GLY 2= GABAa
    outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
  }
      p = 100*(channel)/(nchannels)
    printf("\r=== %3d%% ===",p)
    flushf()
    doNotify() // Although this slows down cell creation, the
               // process is so long that we have to allow the
               // user to quit during the creation.
}
 print "GLG->DS"
if( ( param.n.getval(glg,ds) > 0 ) && ( nDSperchannel != 0 ) && ( nGperchannel != 0 ) ){
 outfile.printf("\n%d %d\n",glg,ds)
channel = 50
target = 0
   for i=0, param.n.getval(glg,ds)-1{
    //Choose source channel
    sourcechannel = random.normal(channel,param.bw.getval(glg,ds)/2)
    if ((sourcechannel - int(sourcechannel)) > 0.5 ){
        sourcechannel = 1+int(sourcechannel)
    } else { sourcechannel = int(sourcechannel) }
    if (sourcechannel <=0 ) sourcechannel=0
    if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
    //Choose random source from available cells
    source = random.discunif(0,nGperchannel-1)
 // print "GLG[",sourcechannel,"][",source,"] connected to "DS[",channel,"][",target,"]"
   if (LSR2GLG ==1 ) {
   sprint(cmd, "golgi[%d][%d].soma glg2dsGABAlist.append( new NetCon(&v(0.5),dstellate[%d][%d].GABAA,thresh,param.delay.getval(glg,ds), param.w.getval(glg,ds)))",sourcechannel, source, channel, target )
     execute1(cmd) //syn id=0 AMPA, =1 GLY =2 GABAa
   } else {
      sprint(cmd, "glg2dsGABAlist.append( new NetCon( golgi[%d][%d].s,dstellate[%d][%d].GABAA, thresh,param.delay.getval(glg,ds), param.w.getval(glg,ds)))",sourcechannel, source ,channel ,target )
        execute1(cmd) //syn id: 0=AMPA, 1= GLY 2= GABAa
   }
 outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
   }
}
outfile.close
}


//--- Setup Auditory model
create_cells()
//connect_cells(fileroot)

   cfhi=64000
   cflo=200

   dur      = 0.3    //duration of stim (seconds)
   spl      = 100
  //   srate    = 100000.0
   stimtdres= 1/srate
   sg_rate  = 50000
   sg_tdres = 1/sg_rate
   stimdelay= 0.01      //sec
   stimtype = 11      //Click Recovery
   reps     = 50 //25
   ANmodel  = 6      //Zilany Bruce model
   species  = 2      //Rat
   nrep     = 1        //nrep is number of reps of stimulus
//Input stimuli
   objref clicktimes
   clicktimes = new Vector()
  //   clicktimes.append(20,36,70,74,130,138).mul(srate/1000)

clicktimes.append(10,26,80,82,150,158,210,214,280,283).mul(srate/1000)

ANFBgr = new Graph()
usesavedfilterbanks=1

RefreshParameters()
ANFilterBankRun()   //Build the filterbank
SetRates()      //Allocate filterbanks to ANFs
  //ShowInputGraphs()
tstop=300

/*objref CNgr[4],CNspks[nchannels][4],CNhist,CNrate[4],CNrategr
proc DSSpikes(){local i, icf
objref CNgr[4],CNspks[nchannels][4],CNhist,CNrate[4],CNrategr
   for i=0,3 {
      CNgr[i] = new Graph()
   CNrate[i] = new Vector()
   }
CNhist = new Graph()
   for icf=0 ,  nchannels-1{
    CNspks[icf][1] = new Vector()
      if (nDSperchannel > 0){for i=0, nDSperchannel-1  {
         for j=0, dstellate[icf][0].spiketimes.size() -1 {
            CNgr[1].mark(dstellate[icf][0].spiketimes.x[j], icf*nDSperchannel, "o", 0.5, red,1)
         }
         CNspks[icf][1].append(dstellate[icf][0].spiketimes)

      }}

      CNspks[icf][1] = CNspks[icf][1].histogram(0,tstop,0.1)
      CNrate[i].append(CNspks[icf][i].sum())
      CNspks[icf][1].add(icf*5).plot(CNhist, 0.1)

  }
}
*/





//ShowGolgiGraphs()

//D-stellate Click train PSTH   (Backoff et al. 1997)
objref gr,targetclickrecovery, dslist, fvec,dvec,ivec,wclick

objref gpstlist, grate[nchannels],anrate[nchannels],rate_level_graph
gr = new Graph()

   //Target response from
             //Fraction of repetitions that ellicit a response
   targetclickrecovery = new Vector()
  targetclickrecovery.append(1,1,1,0.2,1,0.63,1,0.45,1,0.3,0,0,0,0)
  wclick = new Vector(14,1)
  wclick.x[3]=1
  wclick.x[5]=20
  wclick.x[7]=8
  wclick.x[9]=3
targetclickrecovery.plot(gr,2,2)
gr.exec_menu("View = plot")



objref g, dvec, fvec,ivec,gg
gg = new Graph()
g = new Graph()
g.size(0,3,0,3)

proc reset_weights() { local i // 1 arg - weight
   for i = 0,hsr2dsAMPAlist.count()-1 {
   hsr2dsAMPAlist.object(i).weight = param.w.x[hsr][ds]
  }
   for i = 0,lsr2dsAMPAlist.count()-1 {
   lsr2dsAMPAlist.object(i).weight = param.w.x[lsr][ds]
  }
   for i = 0,glg2dsGABAlist.count()-1 {
   glg2dsGABAlist.object(i).weight = param.w.x[glg][ds]
  }
}


// Simplex Method Optimisation function
//D-stellate Click train PSTH   (Backoff et al. 1997)

 a1 =   param.w.x[glg][ds]
 a2  =     param.w.x[hsr][ds]
 // a3 =     param.n.x[hsr][ds]

objref errorvec, DSvec
func fun() {local f
objref errorvec, DSvec
DSvec  = new Vector()
        {
                g.line($2, $3)
                g.flush()
                doNotify()
      print $1, $2 , $3
      }
        //Modify Variables
        param.w.x[glg][ds] = $2
        param.w.x[hsr][ds] = $3
        param.w.x[lsr][ds] = $3
        //param.n.x[hsr][ds] = $4
        {reset_weights()}
      for j=0, reps-1{
         print j
         GenSpikes()
         run()
         DSvec.append(dstellate[50][0].spiketimes)
         //print startsw()-x, "secs"
      }
      DSvec = DSvec.histogram(0,tstop,0.1)

objref errorvec
errorvec = new Vector()
//Find the mean number of spikes in the first click
maxrate = (DSvec.sum(240,260) + DSvec.sum(740,760)+ DSvec.sum(1340,1360))/3
//Calc ratio of number of spikes in second clcik relative to mean first click
errorvec.append( DSvec.sum(260,280) / maxrate )
errorvec.append( DSvec.sum(780,800) / maxrate )
errorvec.append( DSvec.sum(1420,1440) / maxrate )
errorvec.plot(gr,3,3)
print maxrate
errorvec.printf
return errorvec.meansqerr(targetclickrecovery)
}


   ivec = new Vector(1,0)
   fvec = new Vector(1,0)
   dvec = new Vector(1,0)
error=0
  objref file, DShist
file = new File()
  DShist = new Vector()


proc RunFit(){
g.beginline()
error = dvec.fit(fvec, "fun", ivec, &a1, &a2)
print a1, a2, error
g.flush()
g.exec_menu("View = plot")
//fvec.plot(Graph[0],ivec,1,1)
//Output
 file.wopen("DS_ClickRecovery.out.dat")
    file.printf("# DS_ClickRecovery data\n")
    file.printf("# weight GLG->DS =%.2f\n",a1)
    file.printf("# weight ANF->DS =%.2f\n",a2)
    file.printf("# final error=%.2f\n",error)
    file.printf("# Index\tTarget Rate (normalised)\t Output\n")
    for i=0,2 { file.printf("%d\t%.3f\t%.3f\n",i,targetclickrecovery.x[i],errorvec.x[i]) }
    file.close()
}

//
// RunFit()
//


// Praxis method
a=0
print "Setup parameters"
NPARAMS=5
objref pvec,fvec,DSvec,DShist,pvec_ranges,Gvec,Ghist
pvec = new Vector(NPARAMS)
//pvec contains the parameters to be fitted
  //Initial values
pvec.x[0]= 0.00081
pvec.x[1]= 0.00201
pvec.x[2]= 0.00206
pvec.x[3]= 0.002
pvec.x[4]= 0.0008

		//pvec.x[2]= param.w.x[lsr][ds]
  //pvec.x[3]=

//pvec_ranges  (min,max) pairs for each param
pvec_ranges= new Matrix(NPARAMS,2)
//min
 for i=0,NPARAMS-1 pvec_ranges.x[i][0]= 0.00001
//max
 for i=0,NPARAMS-1 pvec_ranges.x[i][1]= 0.005


func err() {local jj,pp
     DSvec = new Vector()
     Gvec = new Vector()
  param.w.x[glg][ds] = $&2[0]
  param.w.x[hsr][ds] = $&2[1]
  param.w.x[lsr][ds] = $&2[2] //param.w.x[hsr][ds]
    dstellate[50][0].GABAA.tau2 = $&2[3]*10000
    dstellate[50][0].soma.gleak_rm = $&2[4]
			 print $&2[0], $&2[1], $&2[2], $&2[3],$&2[4] //param.w.x[glg][ds], param.w.x[hsr][ds]

    // check for bad values
   for pp=0,NPARAMS-1 {
    if ($&2[pp] <= pvec_ranges.x[pp][0] || $&2[pp] > pvec_ranges.x[pp][1]){
     return 1e9
     }
     }
     //param.n.x[hsr][ds] = $&2[2]
        reset_weights()
      for jj=0, reps-1{
         //print jj
         GenSpikes2()
         run()
         DSvec.append(dstellate[50][0].spiketimes)
         Gvec.append(golgi[50][0].spiketimes)
         //print startsw()-x, "secs"
      }
      DShist = DSvec.histogram(0,tstop,0.1)
      Ghist = Gvec.histogram(0,tstop,0.1)
     DShist.plot(g,0.1)
     g.exec_menu("View = plot")
          Ghist.plot(gg,0.1)
     gg.exec_menu("View = plot")
     doNotify()
     objref errorvec
     errorvec = new Vector()
//Find the mean number of spikes in the first click
//  maxrate = (DShist.sum(240,260) + DShist.sum(740,760)+ DShist.sum(1340,1360))/3
//     if (maxrate < 1) return 1e10
//Calc ratio of number of spikes in second clcik relative to mean first click

   for (i=0;i<clicktimes.size;i=i+1){
     errorvec.append(DShist.sum(clicktimes.x[i]*10000/srate+40,clicktimes.x[i]*10000/srate+60))
   }
     //  targetclickrecovery.append(1,1,1,0.2,0,1,0.63,0,1,0.45,0,1,0.3)
     //clicktimes.append(10,26,80,82,150,158,210,214,280,283).mul(srate/1000)
    errorvec.append(DShist.sum(clicktimes.x[1]*10000/srate+60,clicktimes.x[2]*10000/srate+40))
    errorvec.append(DShist.sum(clicktimes.x[3]*10000/srate+60,clicktimes.x[4]*10000/srate+40))
   errorvec.append(DShist.sum(clicktimes.x[5]*10000/srate+80,clicktimes.x[6]*10000/srate+40))
    errorvec.append(DShist.sum(clicktimes.x[7]*10000/srate+80,clicktimes.x[8]*10000/srate+40))

     errorvec.mul(1/reps)
    print a=errorvec.meansqerr(targetclickrecovery,wclick)
    gr.erase_all()
	sprint(grlbl,"Error = %g", a)
	gr.label(0.65,0.85,grlbl)
	sprint(grlbl,"weight GLG->DS = %g", pvec.x[0])
	gr.label(0.65,0.75,grlbl)
	sprint(grlbl,"weight HSR->DS = %g", pvec.x[1])
	gr.label(0.65,0.65,grlbl)
	sprint(grlbl,"weight LSR->DS = %g", pvec.x[2])
	gr.label(0.65,0.55,grlbl)
	sprint(grlbl,"GABA decay tau = %g ", pvec.x[3]*10000)
	gr.label(0.65,0.45,grlbl)
	sprint(grlbl,"DS gleak = %g ", pvec.x[4])
	gr.label(0.65,0.35,grlbl)
  targetclickrecovery.plot(gr,2,1)
  errorvec.plot(gr,3,2)
  doNotify()
  if(file.isopen())  file.close()
  file.aopen("DS_ClickRecovery/praxis.dat")
  file.printf("%g\t%g\t%g\t%g\t%g\t%g\n",$&2[0],$&2[1],$&2[2] ,$&2[3]*10000,$&2[4] ,a)
  file.close()
	    //  print maxrate
  errorvec.printf

  return a

}

objref dstellate[nchannels][1]
dstellate[50][0] = new CNcell(2,cf.x[50],50)
connect_cells(fileroot)
tstop=300
pvec.printf
// print err(0,&pvec.x[0])

proc runprax(){
attr_praxis(0.0001, 0.001, 3)
fit_praxis(NPARAMS,"err",&pvec.x[0])
}
	error=0

strdef datestr,grlbl
objref ivec
ivec= new Vector()
ivec.append(3,9,7,5,1,2,8,6,4,0,10,11,12,13)

proc runprax2(){
//attr_praxis(0.01, 0.0001, 3)
//fit_praxis(NPARAMS,"err",&pvec.x[0])
//Output
 print error=err(0,&pvec.x[0])
 system("date",datestr)
 file.wopen("DS_ClickRecovery/DS_ClickRecovery.Fit.dat")
 file.printf("# DS_ClickRecovery data\n")
 file.printf("# %s \n",datestr)
 file.printf("# weight GLG->DS =%f\n",pvec.x[0])
 file.printf("# weight HSR->DS =%f\n",pvec.x[1])
 file.printf("# weight LSR->DS =%f\n",pvec.x[2])
 file.printf("# GABAa decay tau (ms) =%f\n",pvec.x[3]*10000)
 file.printf("# final error=%f\n",error)
 file.printf("# Click Delay (ms)\tTarget Rate (normalised)\t Output\n")
 for ii=0, 4 { file.printf("%d\t%.3f\t%.3f\t%.3f\t%.3f\n",(clicktimes.x[ivec.x[ii]]-clicktimes.x[ivec.x[ii+5]]) / srate *1000 ,targetclickrecovery.x[ivec.x[ii+5]],targetclickrecovery.x[ivec.x[ii]],errorvec.x[ivec.x[ii+5]],errorvec.x[ivec.x[ii]])}
 file.printf("# Error in quiet regions\n")
 for ii=10, 13 { file.printf("#  %.3f\n",errorvec.x[ii]) }
 file.close()
 system("(cd DS_ClickRecovery; gnuplot DS_ClickRecovery_ExpData.gnu)")

 file.wopen("pvec_DS_ClickRecovery.hoc")
 file.printf("# %s \n",datestr)
 file.printf("param.w.x[glg][ds] =%f\n",pvec.x[0])
 file.printf("param.w.x[hsr][ds] =%f\n",pvec.x[1])
 file.printf("param.w.x[lsr][ds] =%f\n",pvec.x[2])
 file.printf("gaba_decay =%f\n",pvec.x[3]*10000)
 file.close()
 
}


for iprax=0,20 {
            runprax()
    // Default Output Plot
    sprint(grlbl, "DS_ClickRecovery/DS_ClickRecovery_Example%d.eps",iprax)
    gr.printfile(grlbl)
    g.printfile("DS_ClickRecovery/DS_ClickRecovery_DSpsth.eps")
    gg.printfile("DS_ClickRecovery/DS_ClickRecovery_Gpsth.eps")
    g.erase_all()
gg.erase_all()

}
//runprax()
//runprax()
runprax2()



/*  Notes: 17/9/09
* when more emphasis is on the 8ms and 2ms (weight 10 and 8 vs 1 or 2) the optimisation tend to favour higher LSR weight and lower HSR/lower GABA inputs.
* emphasis still present when init favoured LSR and weight normalised
* better improvement when initialised at default - still having trouble with 8ms
*/
