/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/* par_experiment_DS_RateLevel.hoc
 *   
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *    cnstellate was written as part of my PhD at the University of Melbourne
 *
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */



objref file
file = new File()

/* 

Target data
Arnott, Palmer, Wallace et al, 2004
D stellate cell (OnC) rate-level 
Figure 3

Sound level in dB attenuation refers to noise spectrum level at 0 dB equal to \~40 dB re 20 $\mu$Pa/Hz$^{1/2}$.

Data is in spikes per stimulus for a 50 ms tone/noise burst.  This needs to be converted to firing rate (sp per ms)

*/

//////////Default Parameters for DS_RateLevel///////////////

ANsoundspath	    = "../../sounds"
cfhi				= 48000
cflo				= 200
dur                 = 0.049
ramplngth			= 0.002
stimdelay			= 0.02   //sec, 20 msec
dutycycle                       = 0.2 //, usually 0.2
reps				= 25     //
ANmodel				= 6      // Zilany Bruce model version 3
species				= 1      // Cat
ANFBgr					= new Graph()
usesavedfilterbanks		= 1
srate					= 500000
stimtdres				= 1/srate
sg_rate					= 50000
sg_tdres				= 1/sg_rate
RefreshCF()
GetAudiogramData()






// wc -l  ../../cnstellate/TV_RateLevel/Arnott2004_Fig*.dat
//  20 ../../cnstellate/TV_RateLevel/Arnott2004_Fig3_CF6.3kHz.Noise.dat
//  20 ../../cnstellate/TV_RateLevel/Arnott2004_Fig3_CF6.3kHz.Tone.dat


objref Arnott2004_Fig3_Noise, Arnott2004_Fig3_Tone
Arnott2004_Fig3_Tone = new Matrix()
Arnott2004_Fig3_Noise = new Matrix()
file.ropen("DS_RateLevel/Arnott2004_Fig3_CF6.3kHz.Tone.dat")
if (file.isopen()) Arnott2004_Fig3_Tone.scanf(file,20,2)
file.close()
file.ropen("DS_RateLevel/Arnott2004_Fig3_CF6.3kHz.Noise.dat")
if (file.isopen()) Arnott2004_Fig3_Noise.scanf(file,20,2)
file.close()
ArnottFig3_CFpos = FindInd(6300)  //Find position closest to unit's CF=6.3kHz


objref Arnott2004_Fig12_Noise, Arnott2004_Fig12_Tone
Arnott2004_Fig12_Tone = new Matrix()
Arnott2004_Fig12_Noise = new Matrix()
file.ropen("DS_RateLevel/Arnott2004_Fig12_CF10.9kHz.Tone.png.dat")
if (file.isopen()) Arnott2004_Fig12_Tone.scanf(file,17,2)
file.close()
file.ropen("DS_RateLevel/Arnott2004_Fig12_CF10.9kHz.Noise.png.dat")
if (file.isopen()) Arnott2004_Fig12_Noise.scanf(file,20,2)
file.close()
ArnottFig12_CFpos = FindInd(10900)  //Find position closest to unit's CF=10.9kHz


// Target RL data
objref tmp_rate_level, level, dsrate[nchannels],grate[nchannels], hsrrate[nchannels],lsrrate[nchannels]

/// Save rate-level values to file
proc save_rate_level(){
	sprint(fname,"%s/rate_level.dat",fileroot)
	file.aopen(fname)
	for i=0,level.size-1{
		file.printf("%d\t%g\t%g\t%g\t%g\n",level.x[i],\
		dsrate[whichcell].x[i],grate[whichcell].x[i], \
		hsrrate[whichcell].x[i],lsrrate[whichcell].x[i])
			
	}
	file.close()
}	

//Note the level vector must be set prior to calling this function 
obfunc set_target_rate_level(){localobj xdata,ydata
	
	if (level.size == 0) {
		print "set_target_rate_level: 'level' vector not big enough"
		return tmp_rate_level
	}
	if ( object_id($o1) && $o1.nrow >= 2 && $o1.ncol >= 2){
		xdata = $o1.getcol(0).add(100)  //0 dBA in data approx. 40dB SPL
		ydata = $o1.getcol(1).div(0.05) //convert spikes per stimulus to spikes per ms for a 50 ms stimulus
		tmp_rate_level = new Vector()
		tmp_rate_level.interpolate(level,xdata,ydata)
	} else {
		print "set_target_rate_level: Error interpolating data. "
	}
	return tmp_rate_level
}

//Note the level vector must be set prior to calling this function 
obfunc set_target_rate_level_noise(){localobj xdata,ydata
	
	if (level.size == 0) {
		print "Error setting data"
		return tmp_rate_level
	}
	if ( object_id($o1) && $o1.nrow >= 2 && $o1.ncol >= 2){
		xdata = $o1.getcol(0).add(100)  //0 dBA in data approx. 40dB SPL
		ydata = $o1.getcol(1).div(0.05) //convert spikes per stimulus to spikes per ms for a 50 ms stimulus
		tmp_rate_level = new Vector()
		tmp_rate_level.interpolate(level,xdata,ydata)
	} else {
		print "Error interpolating data"
	}
	return tmp_rate_level
	
}

strdef cmd
proc reset_DS_RateLevel(){local i  
  for i=0,nchannels -1 {
  	  if (object_id(dstellate[i][0])) {
		  sprint(cmd,"dstellate[%d][0].soma.gkhtbar_rm = param.dstellate_gkhtbar",i)
		  execute1(cmd)
		  sprint(cmd,"dstellate[%d][0].soma.gleak_rm = param.dstellate_gleak",i)
		  execute1(cmd)
		  sprint(cmd,"dstellate[%d][0].soma.gkltbar_klt =  param.dstellate_gkltbar",i)
		  execute1(cmd)
		  sprint(cmd,"dstellate[%d][0].soma.gkltbar_rm =  param.dstellate_gnabar",i)
		  execute1(cmd)
	  }
  }
}


