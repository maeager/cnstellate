/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */


// calcisilag.hoc
// Olfactory bulb network model: calculate inter-spike interval
//                             : and lag time statistics
// Andrew Davison, The Babraham Institute, 2000.

/* The following procedures are defined for writing results to file
 * fileroot is the filename root. A suffix will be added to
 * this, e.g. fileroot.synch for print_si().
 * i,j are the Tstellate cell indices
 *
 * print_smooth_hist(variance,fileroot)
 * print_an_smooth_hist(variance,fileroot)
 * print_spiketimes(i,j,fileroot)
 * print_raster(fileroot)
 * print_an_raster(fileroot)
 * print_isis(i,j,fileroot)
 * print_isi_stats(fileroot)
 * print_lags(i,j,fileroot)
 * print_si(fileroot)
 */

// Variables used in this file
strdef tstr
objref work, work2, TSoutputarray,DSoutputarray,TVoutputarray,Goutputarray, isi, lags, hist, tmpspike
work    = new Vector()
work2    = new Vector()
TSoutputarray = new Matrix(nchannels,nTSperchannel)
DSoutputarray = new Matrix(nchannels,nDSperchannel)
TVoutputarray = new Matrix(nchannels,nTVperchannel)
Goutputarray = new Matrix(nchannels,nGperchannel)

isi    = new Vector()
lags    = new Vector()
tmpspike = new Vector()

// Procedures for processing spike times -------------------------------

proc calc_isis() { local i,j,k,n // 3 args - indices of Tstellate cell, transient time
  if ($1 > nchannels || $2 > nTSperchannel) {
    print "Sorry - index out of range. Please try again."
    return
  }
  i = int($1)
  j = int($2)
  isi.resize(0)
  n = tstellate[i][j].spiketimes.size()
  if (n > 1) {
    for k = 1,n-1 {
      if (tstellate[i][j].spiketimes.x[k-1] > $3) {
        isi.append(tstellate[i][j].spiketimes.x[k]-tstellate[i][j].spiketimes.x[k-1])
      }
    }
  }
}

proc calc_an_isis() { local i,j,k,n // 3 args - indices of an.HSR cell, transient time
  if ($1 > nchannels || $2 > HSRsperchannel) {
    print "Sorry - index out of range. Please try again."
    return
  }
  i = int($1)
  j = int($2)
  isi.resize(0)
  n = an.HSRspiketimes[i][j].size()
  if (n > 1) {
    for k = 1,n-1 {
      if (an.HSRspiketimes[i][j].x[k-1] > $3) {
        isi.append(an.HSRspiketimes[i][j].x[k]-an.HSRspiketimes[i][j].x[k-1])
      }
    }
  }
}

func minisi() { local i,j,min   // find shortest mean ISI
  min = 1e6
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
      calc_isis(i,j,ttrans)
      if (isi.size() > 0) {
        if (isi.mean() < min) { min = isi.mean() }
      }
    }
  }
  return min
}


proc rate_array() { local i,j
  for i = 0,nchannels-1 {
    for j = 0, nTSperchannel-1 {
      calc_isis(i,j,ttrans)
      if (isi.size() > 0) {
        TSoutputarray.x[i][j] = 1000/isi.mean()
      }else {
        TSoutputarray.x[i][j] = 0
      }
    }
  }
  print "Max: ",arraymax(TSoutputarray)
  TSoutputarray.muls(1/arraymax(TSoutputarray))
}

proc calc_lags() { local i1,j1,i2,j2,k,minidx,min // 5 args - indices of Tstellate cells, transient time
    if ($1 > nchannels || $2 > nTSperchannel || $3 > nchannels || $4 > nTSperchannel) {
    print "Sorry - index out of range. Please try again."
    return
  }
  i1 = int($1)
  j1 = int($2)
  i2 = int($3)
  j2 = int($4)
  lags.resize(0)
  // for each spiketime in cell 1, find closest spike in cell 2
  // Note: first and last spikes ignored since can't calculate previous ISI
  if (tstellate[i2][j2].spiketimes.size > 0) {
    for k = 1,tstellate[i1][j1].spiketimes.size()-2 {
      if (tstellate[i1][j1].spiketimes.x[k] > $5) {
        work = tstellate[i2][j2].spiketimes.c.add(-tstellate[i1][j1].spiketimes.x[k])
        minidx = work.c.abs.min_ind()
        min = work.x[minidx]
        isiprev = tstellate[i1][j1].spiketimes.x[k-1]-tstellate[i1][j1].spiketimes.x[k]
        isinext = tstellate[i1][j1].spiketimes.x[k+1]-tstellate[i1][j1].spiketimes.x[k]
        if (min > isiprev/2 && min < isinext/2) {
          lags.append(min)
        }
      }
    }
  }
}

proc calc_phase_lags() { local i1,j1,i2,j2,k,minidx,min // 5 args - indices of Tstellate cells, transient time
    if ($1 > nchannels || $2 > nTSperchannel || $3 > nchannels || $4 > nTSperchannel) {
    print "Sorry - index out of range. Please try again."
    return
  }
  i1 = int($1)
  j1 = int($2)
  i2 = int($3)
  j2 = int($4)
  lags.resize(0)
  // for each spiketime in cell 1, find closest spike in cell 2
  // Note: first and last spikes ignored since can't calculate previous ISI
  if (tstellate[i2][j2].spiketimes.size > 0) {
    for k = 1,tstellate[i1][j1].spiketimes.size()-2 {
      if (tstellate[i1][j1].spiketimes.x[k] > $5) {
        work = tstellate[i2][j2].spiketimes.c.add(-tstellate[i1][j1].spiketimes.x[k])
        minidx = work.c.abs.min_ind()
        min = work.x[minidx]
        isiprev = tstellate[i1][j1].spiketimes.x[k-1]-tstellate[i1][j1].spiketimes.x[k]
        isinext = tstellate[i1][j1].spiketimes.x[k+1]-tstellate[i1][j1].spiketimes.x[k]
        if (min > isiprev/2 && min < isinext/2) {
          if (min < 0) {
            lags.append(min/isiprev)
          } else {
            lags.append(min/isinext)
          }
        }
      }
    }
  }
}

proc calc_an_lags() { local i1,j1,i2,j2,k,minidx,min // 5 args - indices of an.HSR cells, transient time
    if ($1 > nchannels || $2 > HSRsperchannel || $3 > nchannels || $4 > HSRsperchannel) {
    print "Sorry - index out of range. Please try again."
    return
  }
  i1 = int($1)
  j1 = int($2)
  i2 = int($3)
  j2 = int($4)
  lags.resize(0)
  // for each spiketime in cell 1, find closest spike in cell 2
  // Note: first and last spikes ignored since can't calculate p
revious ISI
  if (an.HSRspiketimes[i2][j2].size > 0) {
    for k = 1,an.HSRspiketimes[i1][j1].size()-2 {
      if (an.HSRspiketimes[i1][j1].x[k] > $5) {
        work = an.HSRspiketimes[i2][j2].c.add(-an.HSRspiketimes[i1][j1].x[k])
        minidx = work.c.abs.min_ind()
        min = work.x[minidx]
        isiprev = an.HSRspiketimes[i1][j1].x[k]-an.HSRspiketimes[i1][j1].x[k-1]
        isinext = an.HSRspiketimes[i1][j1].x[k]-an.HSRspiketimes[i1][j1].x[k+1]
        if (min < isiprev/2 && min > isinext/2) {
          lags.append(min)
        }
      }
    }
  }
}

proc time_hist() { // 1 arg - time step
  work.resize(0)
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
      work.append(tstellate[i][j].spiketimes)
    }
  }
  hist = work.histogram(0,tstop,$1)
  hist.printf("%d\n")
}

func synch_index() { local i1,j1,i2,j2,n
  synchindex = 0
  n = 0
  for i1 = 0, nchannels-1 {
    for j1 = 0, nTSperchannel-1 {
      if (tstellate[i1][j1].spiketimes.size() > 0) {
        for i2 = 0, nchannels-1 {
          for j2 = 0, nTSperchannel-1 {
            if (i1 != i2 || j1 != j2) {
              calc_phase_lags(i1,j1,i2,j2,ttrans)
              n += lags.size()
              synchindex += lags.reduce("abs",0)
            }
          }
        }
      }
    }
  }
  if (n > 0) {
    return synchindex/n
  } else {
    return 1e6
  }
}


func phaselock_index() { local n,i1,j1,i2,j2
  synchindex = 0
  n = 0
  for i1 = 0, nchannels-1 {
    for j1 = 0, nTSperchannel-1 {
      if (tstellate[i1][j1].spiketimes.size() > 0) {
        for i2 = 0, nchannels-1 {
          for j2 = 0, nTSperchannel-1 {
            if (i1 != i2 || j1 != j2) {
              calc_phase_lags(i1,j1,i2,j2,ttrans)
              if (lags.size() > 1) {
                synchindex += lags.var()
                n += 1
              }
            }
          }
        }
      }
    }
  }
  if (n > 0) {
    synchindex = sqrt(synchindex/n)
    return synchindex
  } else {
    return 1e6
  }
}

// Procedures for writing out data --------------------------------

proc calc_smooth_hist() { // 1 arg - variance
  work.resize(0)
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
      work.append(tstellate[i][j].spiketimes)
    }
  }
  hist = work.sumgauss(0,tstop,1,$1)
}

proc print_smooth_hist() { // 2 args - variance, filename root
  calc_smooth_hist($1)
  sprint(filename,"%s.smhist",$s2)
  outfile.wopen(filename)
  outfile.printf("# tstellate cell smoothed histogram\n")
  hist.printf(outfile,"%8.3f\n")
  outfile.close()

  work.resize(0)
  hist.remove(0,ttrans)
  work.spctrm(hist)
  sprint(filename,"%s.pow",$s2)
  outfile.wopen(filename)
  outfile.printf("# Power spectrum of Tstellate cell smoothed histogram\n")
  work.printf(outfile,"%9.5f\n")
  outfile.close()

}

proc calc_an_smooth_hist() { // 1 arg - variance
  work.resize(0)
  for i = 0, nchannels-1 {
    for j = 0, HSRsperchannel-1 {
      work.append(an.HSR[i][j].spiketimes)
    }
  }
  hist = work.sumgauss(0,tstop,1,$1)
}

proc print_an_smooth_hist() { // 2 args - variance, filename root
  calc_an_smooth_hist($1)
  sprint(filename,"%s.an.HSR.smhist",$s2)
  outfile.wopen(filename)
  outfile.printf("# an.HSR cell smoothed histogram\n")
  hist.printf(outfile,"%8.3f\n")
  outfile.close()
  //work.resize(0)
  //hist.remove(0,ttrans)
  //work.spctrm(hist)
  //sprint(filename,"%s.an.HSR.pow",$s2)
  //outfile.wopen(filename)
  //outfile.printf("# Power spectrum of HSR ANF smoothed histogram\n")
  //work.printf(outfile,"%9.5f\n")
  //outfile.close()
}

proc print_an_hist() { // 2 args - binsize, filename root
  work.resize(0)
  pnm.pc.context("post_raster(nchannels, HSRsperchannel, hsrgid)\n")
  for i = 0, nchannels-1 {
    for j = 0, HSRsperchannel-1 {
   take_raster(i, j, hsrgid)
      work.append(tmpspike)
    }
  }
  hist = work.histogram(0,tstop,$1)
  sprint(filename,"%s.an.HSR.hist",$s2)
  outfile.wopen(filename)
  outfile.printf("# an.HSR cell unsmoothed histogram\n")
  hist.printf(outfile,"%8.3f\n")
  outfile.close()
}

proc print_spiketimes() { // 3 args - indices of Tstellate cell plus filename root
  if (numarg() == 3) {
    sprint(filename,"%s_%d_%d.isi",$s3,$1,$2)
    outfile.wopen(filename)
    outfile.printf("# Spiketimes for Tstellate cell [%d][%d]",$1,$2)
    tstellate[$1][$2].spiketimes.printf(outfile,"%10.3f")
  }
  if (numarg() == 1) {
    sprint(filename,"%s.isi",$s1)
    outfile.wopen(filename)
    for i = 0, nchannels-1 {
      for j = 0, nTSperchannel-1 {
        outfile.printf("[%d][%d]",i,j)
        tstellate[i][j].spiketimes.printf(outfile,"%10.3f")
      }
    }
    sprint(filename,"%s.ds.isi",$s1)
    outfile.wopen(filename)
    for i = 0, nchannels-1 {
      for j = 0, nDSperchannel-1 {
        outfile.printf("[%d][%d]",i,j)
        dstellate[i][j].spiketimes.printf(outfile,"%10.3f")
      }
    }
  }
  outfile.close()
}

proc post_raster() {local i, j
  for i = 0, $1-1 {
    for j = 0, $2-1 {
   if (pnm.pc.gid_exists($o3.x[i][j])) {
      sprint(tstr, "%d %d spikes", i, j)
      if ($o3 == tsgid) {
         pnm.pc.post(tstr, tstellate[i][j].spiketimes)
      }else { if ($o3 == dsgid) {
         pnm.pc.post(tstr, dstellate[i][j].spiketimes)
      }else {
         pnm.pc.post(tstr, an.HSRspiketimes[i][j])
      }}
   }
    }
  }
}

proc take_raster() {
   if (pnm.pc.gid_exists($o3.x[$1][$2])) {
      if ($o3 == tsgid) {
         tmpspike = tstellate[$1][$2].spiketimes.c
      }else {if ($o3 == dsgid) {
         tmpspike = dstellate[$1][$2].spiketimes.c
      }else{
         tmpspike = an.HSRspiketimes[$1][$2].c
      }}
   }else{
      sprint(tstr, "%d %d spikes", $1, $2)
      pnm.pc.take(tstr, tmpspike)
   }
}

proc print_raster() { // 1 arg - filename root

  sprint(filename,"%s.ras",$s1)
  outfile.wopen(filename)
  outfile.printf("# Tstellate cell raster plot\n")
  pnm.pc.context("post_raster(nchannels, nTSperchannel, tsgid)\n")
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
   take_raster(i, j, tsgid)
      for k = 0, tmpspike.size()-1 {
        outfile.printf("%d %d %d %10.3f\n",i,j,i*nTSperchannel+j,tmpspike.x[k])
      }
    }
  }
  outfile.close()
}

proc print_ds_raster() { // 1 arg - filename root

  sprint(filename,"%s.ds.ras",$s1)
  outfile.wopen(filename)
  outfile.printf("# Dstellate cell raster plot\n")
  pnm.pc.context("post_raster(nchannels, nDSperchannel, dsgid)\n")
  for i = 0, nchannels-1 {
    for j = 0, nDSperchannel-1 {
   take_raster(i, j, dsgid)
      for k = 0, tmpspike.size()-1 {
        outfile.printf("%d %d %d %10.3f\n",i,j,i*nDSperchannel+j,tmpspike.x[k])
      }
    }
  }
  outfile.close()
}

proc print_an_raster() { // 1 arg - filename root
  sprint(filename,"%s.an.HSR.ras",$s1)
  outfile.wopen(filename)
  outfile.printf("# HSR ANF raster plot\n")
  pnm.pc.context("post_raster(nchannels, HSRsperchannel, hsrgid)\n")
  for i = 0, nchannels-1 {
    for j = 0, HSRsperchannel-1 {
   take_raster(i, j, hsrgid)
      for k = 0, tmpspike.size()-1 {
        outfile.printf("%d %d %d %10.3f\n",i,j,i*HSRsperchannel+j,tmpspike.x[k])
      }
    }
  }
  outfile.close()
}

proc print_isis() { // 3 args - indices of tstellate cell plus filename root
  calc_isis($1,$2,ttrans)
  sprint(filename,"%s_%d_%d.isi",$s3,$1,$2)
  outfile.wopen(filename)
  outfile.printf("# Interspike intervals for Tstellate cell [%d][%d]",$1,$2)
  isi.printf(outfile,"%10.3f")
  outfile.close()
}

proc print_isi_stats() { // 1 arg - filename root
  sprint(filename,"%s.stats",$s1)
  outfile.wopen(filename)
  outfile.printf("#Interspike interval statistics for tstellate cells\n")
  outfile.printf("# i  j   n   mean   median   stdev  \n")
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
      calc_isis(i,j,ttrans)
      outfile.printf("%3d%3d%4d",i,j,isi.size())
      if (isi.size() > 0) {
        outfile.printf("%8.2f%8.2f",isi.mean(),isi.median())
        if (isi.size() > 1) {
          outfile.printf("%8.2f\n",isi.stdev())
        } else {
          printf("\n")
        }
      } else { outfile.printf("\n") }
    }
  }
  outfile.printf("#Interspike interval statistics for ANFs\n")
  outfile.printf("# i  j   n   mean   median   stdev  \n")
  for i = 0, nchannels-1 {
    for j = 0, HSRsperchannel-1 {
      calc_an_isis(i,j,ttrans)
      outfile.printf("%3d%3d%4d",i,j,isi.size())
      if (isi.size() > 0) {
        outfile.printf("%8.2f%8.2f",isi.mean(),isi.median())
        if (isi.size() > 1) {
          outfile.printf("%8.2f\n",isi.stdev())
        }
      } else { outfile.printf("\n") }
    }
  }
  outfile.close()
}

proc print_lags() { local i,j // 3 args - indices of Tstellate cell + filename root
  sprint(filename,"%s_%d_%d.lags",$s3,$1,$2)
  outfile.wopen(filename)
  outfile.printf("# Lag times for Tstellate cell [%d][%d]\n",$1,$2)
  for i = 0, nchannels-1 {
    for j = 0, nTSperchannel-1 {
      calc_lags($1,$2,i,j,ttrans)
      outfile.printf("[%d,%d]",i,j)
      lags.printf(outfile,"%10.3f")
    }
  }
  outfile.close()
}

proc print_si() { // 1 arg - fileroot
  print "Calculating synchronization indices"
  sprint(filename,"%s.synch",$s1)
  outfile.wopen(filename)
  outfile.printf("Synchronization index: %10.3f\n",synch_index())
  outfile.printf("Phase-locking index:   %10.3f\n",phaselock_index())
  outfile.close()
}
