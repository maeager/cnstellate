/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */


install_an_zilany_v4()
/********************************************************
 ** Random Number generator
 *******************************************************/
objref Rand
strdef seedstr
proc InitRandom() {
    objref Rand
    system("date +%s", seedstr)
    seed = 0
    sscanf(seedstr, "%f", &seed)
    if (name_declared("pnm") == 0) print "Random seed:" , seed
    highindex = seed
    lowindex = mcell_ran4_init()
    variable_domain(&highindex, 0, 2^32-1)
    if (name_declared("pnm") == 0) print "RNG initialised ",lowindex, " ", highindex
    Rand = new Random(seed)
    //Rand = new Random(2)
}
InitRandom()


proc FFT(){local n, x
    printf("\tFFT $o2 size %d $o3 size %d $o4.size %d\n", $o2.size, $o3.size, $o4.size)
    if ($1 == 1) { // forward
      $o3.fft($o2, 1)
        n = $o3.size()
	$o3.div(n / 2)
	$o3.x[0] /= 2 // makes the spectrum appear discontinuous
	$o3.x[1] /= 2 // but the amplitudes are intuitive

	$o4.copy($o3, 0, 1, -1, 1, 2)   // odd elements
	$o3.copy($o3, 0, 0, -1, 1, 2)   // even elements
	$o3.resize(n / 2 + 1)   
	$o4.resize(n / 2 + 1)  
	$o3.x[n/2] = $o4.x[0]   //highest cos started in o3.x[1]
	$o4.x[0] = $o4.x[n/2] = 0       // weights for sin(0*i)and sin(PI*i)
	  printf("\tFFT forward size %d\n",n)
	  } else { // inverse
        // shuffle o3 and o4 into o2
      n = $o3.size()
	$o2.copy($o3, 0, 0, n - 2, 2, 1)
	$o2.x[1] = $o3.x[n-1]
	$o2.copy($o4, 3, 1, n - 2, 2, 1)
	$o2.x[0] *= 2
	$o2.x[1] *= 2
	if(numarg()==5) $o5 = $o2.c
	 $o2.fft($o2, -1)
	printf("\tFFT inverse size %d\n",$o2.size)

	}
}

proc FFTn(){local n, x,i,j
    printf("\tFFT $o2 size %d $o3 size %d $o4.size %d\n", $o2.size, $o3.size, $o4.size)
    if ($1 == 1) { // forward
      $o3.fft($o2, 1)
      $o3.printf
        n = $o3.size()
	$o4.copy($o3, 0, 1, -1, 1, 2)   // odd elements
	$o3.copy($o3, 0, 0, -1, 1, 2)   // even elements
	$o3.resize(n / 2)   
	$o3.append($o3.c.remove(0).reverse())
	$o4.resize(n / 2 + 1)  
	$o4.append($o4.c.remove(0).reverse())
	$o3.x[n/2] = $o4.x[0]   //highest cos started in o3.x[1]
//mimic MATLAB's fft 
    for (j=n/2 + 1; j<=n-2; j+=1) $o3.x[j] = $o3.x[n-j]
    	$o3.append($o3.x[1])
	$o4.x[0] = $o4.x[n/2] = 0       // weights for sin(0*i)and sin(PI*i)
	  printf("\tFFT forward size %d\n",n)
	  } else { // inverse
        // shuffle o3 and o4 into o2
      n = $o3.size()
	$o2.copy($o3, 0, 0, n - 2, 2, 1)
	$o2.x[1] = $o3.x[n-1]
	$o2.copy($o4, 3, 1, n - 2, 2, 1)
//	$o2.x[0] *= 2
//	$o2.x[1] *= 2
	$o2.resize(n / 2 + 1)	
	if(numarg() == 5) $o5 = $o2.c
	$o2.fft($o2, -1)
	printf("\tFFT inverse size %d\n",$o2.size)
	}
}


func ceil(){
  if( $1 == int($1)){
    return int($1)
}else {
    return int($1)+1
  }
}
func round(){
  if( $1%1 < 0.5){
    return int($1)
}else {
    return int($1)+1
  }
}

//Persistent global values for ffGn
Nfft = 0
       Nlast = 0
               Hlast = 0

objref ffGnvec, Zmag, Z_real, Z_im,Z_actual
proc ffGn(){local ii, N, tdres, Hinput, mu, sigma localobj tempffGn, k, Ztemp
    /* FFGN  Fast (exact) fractional Gaussian noise and Brownian motion generator.
    *
    * Y = FFGN(N, Hinput, MU, SIGMA) returns a vector containing a sequence of fractional Gaussian
    * noise or fractional Brownian motion.  The generation process uses an FFT which makes it
    * very fast.  The input arguments are:
    *
    *  N   is the length of the output sequence.
    *  H   is the "Hurst" index of the resultant noise (0 < H <= 2).  For 0 < H <= 1,
    *       the output will be fractional Gaussian noise with Hurst index H.  For
    *       1 < H <= 2, the output will be fractional Brownian motion with Hurst
    *       index H-1.  Either way, the power spectral density of the output will
    *       be nominally proportional to 1/f^(2H-1).
    *  mu   is the mean of the noise. [default = 0]
    *  sigma  is the standard deviation of the noise. [default = 1]
    *
    * FFGN(N, H) returns a sequence of fractional Gaussian noise with a mean of zero
    * and a standard deviation of one or fractional Brownian motion derived from such
    * fractional Gaussian noise.
    *
    *  References: Davies & Harte (1987); Beran (1994); Bardet et al., 2002
    * This method is based on an embedding of the covariance matrix in a circulant matrix.
    *
    *  Copyright (C) 2003-2005 by B. Scott Jackson
    *   Revision: 1.3    Date: Aug 28, 2008 by M. S. A. Zilany
    *                    Sigma is deifined for diff. sponts (mu) and Resampling has been introduced to be compatible with the AN model
    *   Revision: 1.2    Date: March 14, 2005
    *   History:
    *       Rev. 1.2 - 3/14/05 - Added some additional documentation and input argument checking.
    *       Rev. 1.1 - 9/15/04 - Added the persistent variables and associated "if"-statement.
     *       Rev. 1.0 - 2/11/03 - Original version.
     */
    /*---- Check input arguments ---------- */

    tempffGn = new Vector()
    k = new Vector()
    objref ffGnvec, Z_real, Z_im
    if (numarg() < 3) {
        return
        }
        N = $1
            tdres = $2
	    Hinput = $3
    if (numarg() >= 4) {
        mu = $4
    } else {
        mu = 0
         }
    if (numarg() == 5) {
        sigma = $5
    } else {
        if (mu < 0.5) {
            sigma = 5
        } else {
            if (mu < 18) {
                sigma = 50   // 7 when added after powerlaw
            } else {
                sigma = 200  // 40 when added after powerlaw
                    }
                }
            }


    if (N <= 0) {
        printf("Length of the return vector must be positive.")
        return
        }

    if (tdres > 1) {
        printf("Original sampling rate should be checked.")
        return
        }

    if ((Hinput < 0) || (Hinput > 2)) {
        printf("The Hurst parameter must be in the interval (0,2].")
        return
        }


    if (sigma <= 0) {
        printf("Standard deviation must be greater than zero.")
        return
        }

        /* Downsampling No. of points to match with those of Scott jackson (tau 1e-1)*/
        printf("1e-1/tdres %g  \t ceil(1e-1/tdres) %d\n", 1e-1 / tdres, ceil(1e-1 / tdres))

	resamp = ceil(1e-1 / (tdres))
	nop = N
	N = ceil(N / resamp) + 1
    if (N < 10) {
        N = 10
        }
printf("\tffGn: resamp %g N %d tdres %g nop %d\n",resamp,N,tdres,nop)
        /* Determine whether fGn or fBn should be produced.*/
    if (Hinput <= 1) {
        H = Hinput
            fBn = 0
    } else {
        H = Hinput - 1
            fBn = 1
              }

              /* Calculate the fGn. */
    if (H == 0.5) {
        ffGnvec = new Vector(N)
        Rand.normal(0, 1)
        ffGnvec.setrand(Rand)  // If H=0.5, then fGn is equivalent to white Gaussian noise.
    } else {
        /* If this function was already in memory before being called this time,
        * AND the values for N and H are the same as the last time it was
        * called, then the following (persistent) variables do not need to be
        * recalculated.  This was done to improve the speed of this function,
        * especially when many samples of a single fGn (or fBn) process are
        * needed by the calling function.
        */
        if (!object_id(Zmag) || Nfft == 0 || Nlast == 0 || Hlast == 0 || N != Nlast || H != Hlast) {
            // The persistent variables must be (re-)calculated.
	  printf("log2(2*(N-1)) %g\t 2^int(log2(2*(N-1))) %d\n", log10(2*(N - 1)) / log10(2), 2 ^(ceil(log10(2*(N - 1)) / log10(2))))
	  Nfft = 2^(ceil(log10(2 * (N - 1)) / log10(2)))
          printf(" Nfft  %f   int(Nfft/2) %d\n", Nfft, int(Nfft / 2))
           NfftHalf = round(Nfft / 2)
	  //k = [0:NfftHalf, (NfftHalf-1):-1:1]
           k.resize(NfftHalf).indgen() 
	   k.append(k.c.remove(0).reverse()).insrt(NfftHalf,NfftHalf)
k.printf
	  //     Zmag = 0.5 .* ( (k+1).^(2.*H) - 2.*k.^(2.*H) + (abs(k-1)).^(2.*H) )
            Zmag = new Vector(k.size)
            Zmag.add(k.c.add(1).pow(2*H)).sub(k.c.pow(2*H).mul(2)).add(k.c.sub(1).abs().pow(2*H)).mul(0.5)
	    Z_actual = Zmag.c
          //	Zmag = real(fft(Zmag));
Zmag.printf
            Z_im = new Vector(Zmag.size(), 0)
            Ztemp = new Vector(Zmag.size(), 0)

            //Zmag.fft(Zmag,1)
            FFT(1, Zmag, Ztemp, Z_im)
            Zmag = Ztemp.c
            if (Zmag.indwhere("<", 0) != -1) {
  printf("The fast Fourier transform of the circulant covariance had negative values.")
                return
                }

                Zmag.sqrt()

// Store N and H values in persistent variables for use during subsequent calls to this function.
          Nlast = N
          Hlast = H
        }

	//    Z = Zmag.*(randn(1,Nfft) + i.*randn(1,Nfft));
        Z_real = new Vector(Zmag.size())
        Z_im = new Vector(Zmag.size())
        Z_real.setrand(Rand).mul(Zmag)
        Z_im.setrand(Rand).mul(Zmag)

	//    y = real(ifft(Z)) .* sqrt(Nfft);
        Ztemp = new Vector(Zmag.size(),0)
        FFT(-1, Ztemp, Z_real, Z_im)
        ffGnvec = Ztemp.c.mul(sqrt(Nfft))
        objref Z, Z_real, Z_im
        ffGnvec.resize(N)
        }

    /* Convert the fGn to fBn, if necessary.*/
    if (fBn) {
        ffGnvec.integral(1)
    }
    printf("\tffGn: resamp %g destlen %d nop %d\n",resamp,ffGnvec.size, nop)
    /* Resampling back to original (1/tdres): match with the AN model */
    tempffGn = ffGnvec.c
    tempffGn.rtresample(ffGnvec,resamp)
    ii=1  //ii = ffGnvec.stdev()

    ffGnvec.mul(sigma/ii)
    ffGnvec.resize(nop)
    printf("\tffGn end: resampl %g srclength %d\n",resamp,ffGnvec.size)

}


totalstim = 50000
dur = 100 // ms
delaypoint = 10 // ms
tdres = 1 / 100000
sampFreq = 10000
N = int(((dur + 2 * delaypoint)/1000)/tdres)

N=1152

objref g[4], ff, ff2,gm
g[0] = new Graph()
g[1] = new Graph()


proc HOC_ffGn(){
objref ffGnvec
ffGn(N, 1/sampFreq, 0.9, 50)
ffGnvec.plot(g[0])
g[0].exec_menu("View = plot")
print "HOC_ffGn mean ", ffGnvec.mean(), " stdev ", ffGnvec.stdev()
}

proc MODL_ffGn(){
objref ff,ff2
ff = new Vector(N)
ff2 = new Vector(N)
ff.fast_fGn(ff2, N, 1/sampFreq, 0.9, 100)
ff2.plot(g[1])
g[1].exec_menu("View = plot")
}



proc TEST_resample(){
g[2] = new Graph()
ff = new Vector(13)
ff2 = new Vector()
ff.indgen()
ff.rtresample(ff2,1000)
ff2.plot(g[2])
g[2].exec_menu("View = plot")
}

proc TEST_unsample(){
objref ff,ff2
g[3] = new Graph()
ff = new Vector(13000)
ff2 = new Vector()
ff.indgen()
ff.rtresample(ff2,1/1000)
ff2.plot(g[3])
g[3].exec_menu("View = plot")
}



HOC_ffGn()
HOC_ffGn()
//HOC_ffGn()
//TEST_resample()
//TEST_unsample()
MODL_ffGn()

/*


Z_real = Zmag.c
Z_im = Zmag.c
ff.resize(Zmag.size)

ff.indgen()
ff.add(1)
Z_real.mul(ff)
objref Ztemp
Ztemp = new Vector()
ff.reverse()
Z_im.mul(ff)
FFT(-1,Ztemp,Z_real,Z_im)
Ztemp.printf
*/


objref Z_matlab,Z_sqrn
Z_matlab = new Vector()
Z_matlab.append(   0.758613, \
   0.259954, \
   0.166237, \
   0.137259, \
   0.120482, \
   0.109417, \
   0.101416, \
   0.095281, \
   0.090371, \
   0.086303, \
   0.082832, \
   0.079783, \
   0.077023, \
   0.074429, \
   0.071854, \
   0.069147, \
   0.064693, \
   0.069147, \
   0.071854, \
   0.074429, \
   0.077023, \
   0.079783, \
   0.082832, \
   0.086303, \
   0.090371, \
   0.095281, \
   0.101416, \
   0.109417, \
   0.120482, \
   0.137259, \
   0.166237, \
   0.259954)

Z_sqrn = new Vector()
Z_sqrn.append(4.29136, \
   1.47052, \
   0.94038, \
   0.77645, \
   0.68155, \
   0.61896, \
   0.57370, \
   0.53899, \
   0.51122, \
   0.48821, \
   0.46857, \
   0.45132, \
   0.43571, \
   0.42103, \
   0.40647, \
   0.39115, \
   0.36596, \
   0.39115, \
   0.40647, \
   0.42103, \
   0.43571, \
   0.45132, \
   0.46857, \
   0.48821, \
   0.51122, \
   0.53899, \
   0.57370, \
   0.61896, \
   0.68155, \
   0.77645, \
   0.94038, \
   1.47052)
