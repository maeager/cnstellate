/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
 *   pvec.hoc
 *   Optimisation procedures and parameter setup
 *   
 * 
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */

  objref pvec,fvec,pvec_ranges,pvec_name,pvec_factor
  pvec			= new Vector()//NPARAMS) //contains the parameters to be fitted
  pvec_name		= new List()			 //names of parameters in String list
  pvec_factor	= new Vector() //NPARAMS,1)
  //mul factor
  //for i		=0,NPARAMS-1 pvec_factor.x[i] = 1
  
  NPARAMS		= 11
  
  pvec_ranges	= new Matrix(NPARAMS,2) // (min,max) pairs for each param
  //min
  for i			=0,NPARAMS-1 pvec_ranges.x[i][0]= 0.000001
  //max
  for i			=0,NPARAMS-1 pvec_ranges.x[i][1]= 0.03
  
  // Initialise parameter optimisation variable list/vectors
  // NPARAMS is a global variable showing the size of pvec. Set to zero at initialisation, increments with each added parameter, finishes when same value as pvec size indicated at init 
  // pvec is a vector containing the modified parameter values and is passed to the fitness function
  // pvec_name is a list of strings containing the variable names  
  // pvec_factor is a vector of factor values used to modify original value to value used by the fitness function 
proc init_params(){
    objref pvec,fvec,pvec_ranges,pvec_name,pvec_factor
    pvec	= new Vector()//NPARAMS) //contains the parameters to be fitted
    pvec_name = new List() //names of parameters in String list
    pvec_factor = new Vector() //NPARAMS,1) //mul factor
    //for i = 0,NPARAMS-1 pvec_factor.x[i] = 1
    
    NPARAMS = $1
    pvec_ranges	= new Matrix(NPARAMS,2) // (min,max) pairs for each param
    //minimum value
    for i	= 0,NPARAMS-1 pvec_ranges.x[i][0]= 0.000001
    //maximum value	
    for i	= 0,NPARAMS-1 pvec_ranges.x[i][1]= 0.03    
    NPARAMS=0 // Reset value so that appending variables will give a quick check on the num of params 
}


// Adding a variable to the optimisation parameter list
// args: 
// 1 current pvec size (should be NPARAMS)
// 2 initial value, 
// 3 variable name string,
// 4 factor (used for normalising values in pvec)
// 5 minimum value
// 6 maximum value
proc add_opt_param(){
    if (pvec.size() != $1 ){
	print "add_opt_param: Error pvec not initialised."
	return
    }
    if (pvec_ranges.getcol(0).size()-1 < $1){
	print "Error in add_opt_param: index not in range or pvec not initialised."
	return
    }
    print "Adding variable: ", $s3
    print "Factor ", $4, " Init value ", $2, " range [", $5, ",", $6, "]" 
    NPARAMS+=1
    pvec.append($2)                   //Initial value    
    pvec_name.append(new String($s3)) //Variable Name
    pvec_factor.append($4)
    pvec_ranges.x[$1][0]= $5
    pvec_ranges.x[$1][1]= $6
    if (pvec_ranges.getcol(0).size() == NPARAMS){
	print "add_opt_param: pvec fully populated. Optimisation can begin."
    }    
}

// Example setup: 1. initialise, 2. add the correct number of parameters
// init_params(4) 
// add_opt_param( 0, 0.001, "param.w.x[glg][ds]", 1,    0.000001, 0.03)
// add_opt_param( 1, 0.002, "param.w.x[hsr][ds]", 1,    0.000001, 0.03)
// add_opt_param( 2, 0.003, "param.w.x[lsr][ds]", 1,    0.000001, 0.03)
// add_opt_param( 3, 0.001592,"param.ds_gkltbar",10,   0.000001, 0.03)





// cmd is a strdef variable that should be used in local routines and not passed across procedures
strdef cmd
proc set_pvec(){local pp
    for pp=0,NPARAMS-1 {
		sprint(cmd,"pvec.x[%d]= %s / %g ",pp,pvec_name.object(pp).s,pvec_factor.x[pp])
		execute1(cmd)
    }
}

proc set_params(){local pp
    for pp=0,NPARAMS-1 {
		sprint(cmd,"%s= %g * %g ",pvec_name.object(pp).s,pvec.x[pp],pvec_factor.x[pp] )
		execute1(cmd)
    }
}

proc show_pvec(){local pp
    //    pvec.printf
    for pp =0,NPARAMS-1 {
	print pvec_name.object(pp).s
	sprint(cmd,"print \"pvec:\", %g * %g  ",pvec.x[pp], pvec_factor.x[pp])
	execute1(cmd)
	sprint(cmd,"print \"actual:\", %s  ",pvec_name.object(pp).s)
	execute1(cmd)		
    }
}


tolerance = 0.0001
maxstepsize = 0.0001
printmode = 3
strdef error_fn
error_fn = "TStellate2_err"

proc runprax(){
//Set the attributes of the praxis method
// tolerance : find f(x) that minimises norm(x-x0)<tolerance
// maxstepsize: max distance between initial guess and minimum
// printmode: verbosity of debugging output
   attr_praxis(tolerance, maxstepsize, printmode)
   fit_praxis(NPARAMS,error_fn,&pvec.x[0])
}

	
proc QuickRun(){
    set_pvec()
    pvec.printf
    sprint(cmd,"%s(0,&pvec.x[0])",error_fn)
    execute1(cmd)
}
	
