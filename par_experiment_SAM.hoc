// experiment_vowel_baseline.hoc
// Cochlear Nucleus network model: experiment file
//   for lateral inhibition.
// Andrew Davison, The Babraham Institute, 2000.

// *** Set inputs and connections
// set_no_input()
// glomshock(20,2,5)
// randomise_NMDA(NMDAweight,(0.5*NMDAweight)^2)

// *** Voltage clamp mitral cell
// objref vclamp
// if (pnm.gid_exists(tsgid.x[3][3])) {
// mit[3][3].GABAA.e = 0 // mV
// mit[3][3].soma vclamp = new SEClamp(0.5)
// vclamp.rs = 2 // Mohm
// vclamp.dur1 = 1
// vclamp.amp1 = -65
// vclamp.dur2 = 4000
// vclamp.amp2 = -70
// vclamp.dur3 = 0
// vclamp.amp3 = -65
// }


forall {Ra = 150 cm=0.9}
// *** Set-up recording
objref dsvec, tvec, vstel, vtv //, iclamp
record_step = 0.1
record_vec_size = int(tstop/record_step)+1
dsvec = new Vector(record_vec_size)
tvec = new Vector(record_vec_size)
vstel = new Vector(record_vec_size)
vtv = new Vector(record_vec_size)
//iclamp = new Vector(record_vec_size)
record_step = 0.1
if (pnm.gid_exists(dsgid.x[icentre][0])) dsvec.record(&dstellate[icentre][0].soma.v(0.5),record_step)
if (pnm.myid == 0) tvec.record(&t,record_step)
if (pnm.gid_exists(tsgid.x[icentre][0])) vstel.record(&tstellate[icentre][0].soma.v(0.5),record_step)
if (pnm.gid_exists(tvgid.x[icentre][0])) vtv.record(&tuberculoventral[icentre][0].soma.v(0.5),record_step)
//if (pnm.gid_exists(tsgid.x[3][3])) iclamp.record(&vclamp.i,record_step)

proc post_record() {
   if (pnm.gid_exists(dsgid.x[icentre][0])) pnm.pc.post("dsvec", dsvec)
   if (pnm.gid_exists(tsgid.x[icentre][0])) pnm.pc.post("vstel", vstel)
   if (pnm.gid_exists(tvgid.x[icentre][0])) pnm.pc.post("vtv", vtv)
   //if (pnm.gid_exists(tsgid.x[3][3])) pnm.pc.post("iclamp", iclamp)
}
proc take_record() {
   pnm.pc.context("post_record()")
   if (!pnm.pc.gid_exists(dsgid.x[icentre][0])) pnm.pc.take("dsvec", dsvec)
   if (!pnm.pc.gid_exists(tsgid.x[icentre][0])) pnm.pc.take("vstel", vstel)
   if (!pnm.pc.gid_exists(tvgid.x[icentre][0])) pnm.pc.take("vtv", vtv)
   //if (!pnm.pc.gid_exists(tsgid.x[3][3])) pnm.pc.take("iclamp", iclamp)
}

// *** Process data and print out results
xopen("par_calcisilag.hoc") // everybody needs this for the post_results

proc print_results() {
  print_raster(fileroot)
  print_an_raster(fileroot)
  print_an_hist(1,fileroot)
  sprint(filename,"%s.curvs",fileroot)
  outfile.wopen(filename)
  take_record()
  for i = 0, tvec.size()-1 {
  if (i>=dsvec.size() || i>=vstel.size() || i>=vtv.size()) break
    outfile.printf("%8.3g %8.3g %8.3g %8.3g \n",tvec.x[i],dsvec.x[i],vstel.x[i],vtv.x[i])
  }
  outfile.close()
  print "Results printed to files"
}

objref HSRVectorStrength,HSRRayleighValue
objref LSRVectorStrength,LSRRayleighValue

proc CalcANFVectorStrength() {local i,j,k,sumxi, sumyi, n,period, thetai,ignorebefore
   objref VectorStrength,RayleighValue
   ignorebefore=$1
   period=1000/AM_modfreq
   HSRVectorStrength= new Vector()
   HSRRayleighValue= new Vector()
   LSRVectorStrength= new Vector()
   LSRRayleighValue= new Vector()

   for i=0,nchannels-1{
     sumxi = 0
     sumyi = 0
     n=0
     for j=0, HSRsperchannel-1{

      for k=0, an.HSRspiketimes[i][j].size-1{
         if (an.HSRspiketimes[i][j].x[k] < ignorebefore) continue
         thetai = 2*PI*((an.HSRspiketimes[i][j].x[k]%period)/period)
         sumxi+=cos(thetai)
         sumyi+=sin(thetai)
         n+=1
      }

     }
     if (n !=0 ){
          HSRVectorStrength.append(sqrt((sumxi^2)+(sumyi^2))/n)
        HSRRayleighValue.append(2*n*((sqrt((sumxi^2)+(sumyi^2))/n))^2)
     } else {
      HSRVectorStrength.append(0)
        HSRVectorStrength.append(0)
     }
     sumxi = 0
     sumyi = 0
     n=0
     for j=0, LSRsperchannel-1{

      for k=0, an.LSRspiketimes[i][j].size-1{
         if (an.LSRspiketimes[i][j].x[k] < ignorebefore) continue
         thetai = 2*PI*((an.LSRspiketimes[i][j].x[k]%period)/period)
         sumxi+=cos(thetai)
         sumyi+=sin(thetai)
         n+=1
      }

     }
     if (n !=0 ){
          LSRVectorStrength.append(sqrt((sumxi^2)+(sumyi^2))/n)
        LSRRayleighValue.append(2*n*((sqrt((sumxi^2)+(sumyi^2))/n))^2)
     } else {
      LSRVectorStrength.append(0)
        LSRRayleighValue.append(0)
     }
   }

}

objref MTF[nchannels*2],Rayleigh[nchannels*2],MTFgr, mtffreq
strdef mtfstr
   reps = 50


proc ModulationTransferFunction(){local i,j,count,sum,channel,hi,lo,runtime,modfreq
   objref MTF[6],MTFgr,mtffreq

   mtffreq = new Vector()
   mtffreq.append(50,150,250,350,450,550,650,750,850,950,2000)
   for i=0,6-1 { MTF[i] = new Vector()  Rayleigh[i] = new Vector()}

   count=0


   i=0
   for (spl = 30;spl<=70;spl+=20){

   for modfreq = 0, mtffreq.size()-1{
      AM_modfreq = mtffreq.x[modfreq]
      runtime = startsw()
      //New stimulus
      //an.ClearSpikes()
      LoadSAM(spl)
      //Erase old spikes
      //an.ClearSpikes()
      //Set all ANFs to New rates and reset reorder flag

      an.GenSpikes()

      //Calculate VS and Rayleigh statistics
      CalcANFVectorStrength(50)
      MTF[i].append(HSRVectorStrength.x[61])
         Rayleigh[i].append(HSRRayleighValue.x[61])
         MTF[i+3].append(LSRVectorStrength.x[61])
         Rayleigh[i+3].append(LSRRayleighValue.x[61])

      }
      i+=1
      runtime = startsw()-runtime
      print "MTF ",AM_modfreq," took ",runtime, " secs to simulate"
   }



   print runtime

// Display plots
   MTFgr = new Graph()
   sprint(mtfstr,"Modulation Transfer Function:  ")
   MTFgr.label(0.25, 0.95, mtfstr)
   mtffreq.log10()
   for j=0,2 MTF[j].plot(MTFgr,mtffreq, black, 1)
      //Rayleigh[j].div(100)
      //Rayleigh[j].plot(MTFgr,mtffreq, red, 1)

   //MTFgr.size(0,100,0,300)
   //sprint(mtfstr, "_MTF_.eps")
   MTFgr.exec_menu("View = plot")
   //doNotify()
   //MTFgr.printfile(mtfstr)
//   if (!using_gui){ objref MTFgr}
}

objref mtffreq

   mtffreq = new Vector()
   mtffreq.append(50,150,250,350,450,550,650,750,850,950,2000)

proc MTFStim(){local i,j


   for (spl = 30;spl<=70;spl+=20){
   for i = 0, mtffreq.size()-1{
   //   if (pnm.myid%(i+1)==1){
      AM_modfreq = mtffreq.x[i]
      LoadSAM(spl)
   //   }

   }}

}


xpanel("MTF")
xbutton("Modulation Transfer Function", "ModulationTransferFunction()")
xbutton("Modulation Transfer Function Stims", "MTFStim()")
xpanel()



//Setup Auditory model

   cfhi=64000
   cflo=200
   stimtype = 3      //SAM sinusoidal ampl-modulation
   tonefreq    = 10000   //Hz
   dur       = 0.2    //duration of tone segment (seconds)
   dutycycle    = 0      //quiet duration = dutycycle*dur
   ramplngth    = 0.005
   ANmodel=6
   species=2
   srate       = 500000.0
   stimtdres    = 1/srate
   sg_rate    = 50000
   sg_tdres = 1/sg_rate
   nrep      = 1        //nrep is number of reps of stimulus
   stimdelay    = 0.01      //sec


proc RescaleStim(){local rms
rms = Decibels(stim)
stim.mul(spl2amplNoise(spl)/spl2amplNoise(rms))
}


load_file("cngui.hoc")
proc LoadSAM(){
RefreshParameters()   //Generate or get stim from file
spl=$1
RescaleStim()      //Scale the vowel
ANFilterBankRun()   //Build the filterbank
an.SetRates()      //Allocate filterbanks to ANFs
ShowInputGraphs()
}

usesavedfilterbanks=1
//MTFStim()
LoadSAM(70)
/*
for i=0,nchannels-1 {
   print i
   golgi[i][0].SetRate()
}
ShowGolgiGraphs()
*/


//CalcANFVectorStrength(50)
//an.GenSpikes() //calls SGfast(1) on each fibre
                //it might be quicker to use another method
                //eg. calling the original zbcatmodel and
                //outputing several spike trains
                //since ANFs are just VecStims

//ModulationTransferFunction()
      
//xopen("SAM.ses")
