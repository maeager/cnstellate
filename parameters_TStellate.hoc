/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/* 
 *   
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *    cnstellate was written as part of my PhD at the University of Melbourne
 *
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */


// Cochlear Nucleus network model: parameters file
// based on parameters_odour_baseline.hoc by Andrew Davison
// Michael Eager, University of Melbourne, 2009

nchannels								= 100							// Total number of frequency channels
nTSperchannel							= 1								// number of TS cells in each freq channel
numTS									= nchannels*nTSperchannel		// total number of TS cells
nTVperchannel							= 1								// number of TV cells in each freq channel
numTV									= nchannels*nTVperchannel		// total number of TV cells
nDSperchannel							= 1								// number of DS cells in each freq channel
numDS									= nchannels*nDSperchannel		// total number of DS cells
nGperchannel							= 1								// number of Golgi cells in each freq channel
numG									= nchannels*nGperchannel		// total number of Golgi cells
use_seed								= 0
seed									= 0								// seed for random number generator see InitRandom()



strdef fileroot, origfileroot
sprint(fileroot,"TStellate")					// root for output filenames
origfileroot							= fileroot

inputnumber								= 1								// fixed input file
tstop									= 90							// ms, total simulation time
ttrans									= 20							// ms,  when calculating statistics, ignore
												// spikes occuring before this time
cvode.active(0)
dt										= 0.05
steps_per_ms							= 10							// NEURON variable
setdt()
dt										= 0.1							//ms, integration time step
celsius									= 37							//degrees C, body  temperature
secondorder								= 2								//second order integration


//Some default parameters
v_init									= -65

param.ts_gnabar						= 0.23677
param.ts_gkhtbar					= 0.0189416
param.ts_gleak						= 0.000473539
param.ts_erev						= -55
param.ts_ghbar						= 6.20392e-05
param.ts_gkabar						= 0.01539

//Optimisation parameters
print "Optimisation parameters for T Stellate cell"

xopen("pvec.hoc")



//Names                                               //Initial values	//Param Factor

proc append_num_lsrts_connections(){
	add_opt_params(NPARAMS,0.015,"param.n.x[lsr][ts]",1000,0.001,0.1)
// NPARAMS+=1
// 	pvec_name.append(new String("param.n.x[lsr][ts]"))	
// 	pvec.append(0.015)	   
// 	pvec_factor.append(1000)
// 	pvec_ranges.x[pvec.size-1][0]=0.001
// 	pvec_ranges.x[pvec.size-1][1]=0.1
	
}

proc append_num_hsrts_connections(){
	add_opt_params(NPARAMS,0.008,"param.n.x[hsr][ts]",1000,0.001,0.1)
// NPARAMS+=1
// 	pvec_name.append(new String("param.n.x[hsr][ts]"))	
// 	pvec.append(0.008)	   
// 	pvec_factor.append(1000)
// 	pvec_ranges.x[pvec.size-1][0]=0.001
// 	pvec_ranges.x[pvec.size-1][1]=0.1
	
}

proc append_num_dsts_connections(){
	add_opt_params(NPARAMS,0.017,"param.n.x[ds][ts]",1000,0.001,0.1)
// NPARAMS+=1
// 	pvec_name.append(new String("param.n.x[ds][ts]"))	    
// 	pvec.append(0.017)  
// 	pvec_factor.append(1000)
// 	pvec_ranges.x[pvec.size-1][0]=0.001
// 	pvec_ranges.x[pvec.size-1][1]=0.1
	
}

proc append_num_tvts_connections(){
	add_opt_params(NPARAMS,0.015,"param.n.x[tv][ts]",1000,0.001,0.1)
// NPARAMS+=1
// 	pvec_name.append(new String("param.n.x[tv][ts]"))	    
// 	pvec.append(0.015)   
// 	pvec_factor.append(1000)
// 	pvec_ranges.x[pvec.size-1][0]=0.001
// 	pvec_ranges.x[pvec.size-1][1]=0.1
}

proc append_num_glgts_connections(){
	add_opt_params(NPARAMS,0.005,"param.n.x[glg][ts]",1000,0.001,0.1)
// NPARAMS+=1
// 	pvec_name.append(new String("param.n.x[glg][ts]"))	
// 	pvec.append(0.005)	
// 	pvec_factor.append(1000)
// 	pvec_ranges.x[pvec.size-1][0]=0.001
// 	pvec_ranges.x[pvec.size-1][1]=0.1
	
}




proc append_num_connections(){
	NPARAMS		+=5
	pvec_name.append(new String("param.n.x[lsr][ts]"))	pvec.append(0.0015)	   pvec_factor.append(10000)
	pvec_name.append(new String("param.n.x[hsr][ts]"))	pvec.append(0.0008)	   pvec_factor.append(10000)
	pvec_name.append(new String("param.n.x[ds][ts]"))	    pvec.append(0.0017)  pvec_factor.append(10000)
	pvec_name.append(new String("param.n.x[tv][ts]"))	    pvec.append(0.0015)   pvec_factor.append(10000)
	pvec_name.append(new String("param.n.x[glg][ts]"))	pvec.append(0.0005)	pvec_factor.append(10000)
	//Set ranges for 'n' variables assuming all five are selected above
	for i=pvec.size()-5,pvec.size()-1 {
		pvec_ranges.x[i][0]		=0.00001  // 1 to
		pvec_ranges.x[i][1]		=0.1    // 100
	}
}


// pvec_name.append(new String("param.ts_gkhtbar"))	pvec.append(0.000189416 )	 pvec_factor.append(100) 
// pvec_ranges.x[pvec.size()-1][0]		=0.0001  
// pvec_ranges.x[pvec.size()-1][1]		=0.0005


proc append_lsrts_weights(){
    add_opt_params(NPARAMS,0.003,"param.w.x[lsr][ts]",1,0.0000001  ,0.1     )
// NPARAMS		+=1
// 	pvec_name.append(new String("param.w.x[lsr][ts]"))	
// 	pvec.append(0.003)	
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=0.0000001  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.1     
	
}
proc append_hsrts_weights(){
    add_opt_params(NPARAMS,0.0025,"param.w.x[hsr][ts]",1,0.0000001  ,0.1     )
// NPARAMS		+=1
// 	pvec_name.append(new String("param.w.x[hsr][ts]"))	
// 	pvec.append(0.0025)	
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=0.0000001  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.1     
	
}
proc append_dsts_weights(){
	add_opt_params(NPARAMS,0.000170,"param.w.x[ds][ts]",1,0.0000001,0.1 )
////  NPARAMS		+=1  
// // 	pvec_name.append(new String("param.w.x[ds][ts]"))	    pvec.append(0.000170)	pvec_factor.append(1)
// // 	pvec_ranges.x[pvec.size()-1][0]		=0.0000001  //
// // 	pvec_ranges.x[pvec.size()-1][1]		=0.1    // 
	

}
proc append_tvts_weights(){
    add_opt_params(NPARAMS,0.00010,"param.w.x[tv][ts]",1,0.0000001  ,0.1 )   
// NPARAMS		+=1  
// 	pvec_name.append(new String("param.w.x[tv][ts]"))	    
// 	pvec.append(0.00010)	    
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=0.0000001  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.1    
	
}
proc append_glgts_weights(){
    add_opt_params(NPARAMS,0.000130,"param.w.x[glg][ts]",1,0.0000001  ,0.1     )
// NPARAMS		+=1  
// 	pvec_name.append(new String("param.w.x[glg][ts]"))	
// 	pvec.append(0.000130)	
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=0.0000001  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.1     
	
}



proc append_weights(){
    NPARAMS		+=5
	pvec_name.append(new String("param.w.x[lsr][ts]"))	pvec.append(0.002)	pvec_factor.append(1)
	pvec_name.append(new String("param.w.x[hsr][ts]"))	pvec.append(0.0022)	pvec_factor.append(1)
	pvec_name.append(new String("param.w.x[ds][ts]"))	    pvec.append(0.000170)	pvec_factor.append(1)
	pvec_name.append(new String("param.w.x[tv][ts]"))	    pvec.append(0.00010)	    pvec_factor.append(1)
	pvec_name.append(new String("param.w.x[glg][ts]"))	pvec.append(0.000130)	pvec_factor.append(1)
    for i=pvec.size()-5,pvec.size()-1 {
		pvec_ranges.x[i][0]		=0.0000001  // 1 to
		pvec_ranges.x[i][1]		=0.3    // 100
	}
	
}



// pvec_name.append(new String("param.ts_gnabar"))	pvec.append(0.23677)	 pvec_factor.append(1)
//pvec_name.append(new String("param.ts_gkhtbar"))	pvec.append(0.0189416 )	 pvec_factor.append(1)
/* // Reversal potential
pvec_name.append(new String("param.ts_erev"))	    pvec.append(0.0055 )     pvec_factor.append(-10000)
pvec_ranges.x[4][0]					=0.0045
pvec_ranges.x[4][1]					=0.00700
*/
//  pvec_name.append(new String("param.ts_ghbar"))	pvec.append(6.20392e-04) pvec_factor.append(10)

//  pvec_name.append(new String("param.ts_gkabar"))	pvec.append(0.000473539) pvec_factor.append(1)






proc append_ts_soma_erev(){ // Reversal potential
    add_opt_params(NPARAMS,0.055 ,"param.ts_erev",-1000,0.030,0.080)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_erev"))	    
// 	pvec.append(0.055 )     
// 	pvec_factor.append(-1000)
// 	pvec_ranges.x[pvec.size()-1][0]	=0.030
// 	pvec_ranges.x[pvec.size()-1][1]	=0.080
	
} 

proc append_ghbar(){ 
	add_opt_params(NPARAMS,6.20392e-05,"param.ts_ghbar",1,5e-06  ,0.0005)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_ghbar"))	
// 	pvec.append(6.20392e-05)  
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=5e-06  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.0005
	
}
proc append_gkabar(){
	add_opt_params(NPARAMS,0.01539,"param.ts_gkabar",1,5e-03  ,0.05)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_gkabar"))	
// 	pvec.append(0.01539) 
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=5e-03  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.05
	
}
proc append_gleak(){
		//Leak conductance effects Input resistance and Membrane time constant
	add_opt_params(NPARAMS,0.000473539,"param.ts_gleak",1,5e-05  ,0.005)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_gleak"))	
// 	pvec.append(0.000473539) 
// 	pvec_factor.append(1)  
// 	pvec_ranges.x[pvec.size()-1][0]		=5e-05  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.005
	
}

proc append_ts_dend_g(){
	add_opt_params(NPARAMS,0.001,"param.ts_dend_g",1,5e-04  ,0.01)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_dend_g"))	
// 	pvec.append(0.001) 
// 	pvec_factor.append(1)
// 	pvec_ranges.x[pvec.size()-1][0]		=5e-04  
// 	pvec_ranges.x[pvec.size()-1][1]		=0.01
	
}
proc append_ts_dend_erev(){
	// Reversal potential
    add_opt_params(NPARAMS,0.065 ,"param.ts_dend_e",-1000,0.030,0.080)
// NPARAMS += 1 
// 	pvec_name.append(new String("param.ts_dend_e"))	    
// 	pvec.append(0.065 )     
// 	pvec_factor.append(-1000)
// 	pvec_ranges.x[pvec.size()-1][0]	=0.030
// 	pvec_ranges.x[pvec.size()-1][1]	=0.080
	
} 

proc append_ts_jitter_sd(){
	add_opt_params(NPARAMS,0.0025,"param.ts_jitter_sd",1000,1e-04  ,0.01)
	// NPARAMS += 1 
	// pvec_name.append(new String("param.ts_jitter_sd"))	
	// pvec.append(0.0025) 
	// pvec_factor.append(1000)
	// pvec_ranges.x[pvec.size()-1][0]		=1e-04  
	// pvec_ranges.x[pvec.size()-1][1]		=0.01
	
}




NPARAMS=8
init_params(NPARAMS)
append_num_connections() 
// append_ts_dend_g()
append_hsrts_weights()
append_lsrts_weights()
append_gleak() 
//
//  append_ghbar() 
//  append_gkabar()
//  append_weights()

//  append_ts_soma_erev()



proc TS_optim_param_panel(){
	xpanel("TStellate Optimisation Param")
	xvalue("NPARAMS")
	xbutton("Initialise pvec","init_params(NPARAMS)")
	xbutton("Include ts_gleak","append_gleak()")
	xbutton("Include ts_erev","append_ts_soma_erev()")
	xbutton("Include ts_ghbar","append_ghbar()")
	xbutton("Include ts_gkabar","append_gkabar()")
	xbutton("Include ts_dend_g","append_ts_dend_g()")
	xbutton("Include ts_dend_e","append_ts_dend_erev()")
	xbutton("Include ts_jitter_sd","append_ts_jitter_sd()")
	
	xbutton("Include w.x[hsr][ts]","append_hsrts_weights()")
	xbutton("Include w.x[lsr][ts]","append_lsrts_weights()")
	xbutton("Include w.x[ds][ts]","append_dsts_weights()")
	xbutton("Include w.x[tv][ts]","append_tvts_weights()")
	xbutton("Include w.x[glg][ts]","append_glgts_weights()")
	
	xbutton("Include n.x[hsr][ts]","append_num_hsrts_connections()")
	xbutton("Include n.x[lsr][ts]","append_num_lsrts_connections()")
	xbutton("Include n.x[ds][ts]","append_num_dsts_connections()")
	xbutton("Include n.x[tv][ts]","append_num_tvts_connections()")
	xbutton("Include n.x[glg][ts]","append_num_glgts_connections()")
	xbutton("pvec to params","set_params()")
	xbutton("params to pvec","set_pvec()")
	xbutton("Quick run","QuickRun()")
	
	xpanel() 
}
TS_optim_param_panel()