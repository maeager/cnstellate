/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/* 
 *   
 *    Copyright Â© 2012 Michael Eager, (mick.eager@gmail.com)
 *
 *    This file is part of cnstellate.
 * 
 *    This is free software: you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation, either version 3 of the License, or
 *    (at your option) any later version.
 *
 *    This is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program.  If not, see <http://www.gnu.org/licenses/>.  
 */


// Params.hoc
// Cochlear Nucleus network model: parameters file
// based on parameters_odour_baseline.hoc by Andrew Davison
// Michael Eager, University of Melbourne

nchannels						= 100      // Total number of frequency channels
nTSperchannel					= 0   // number of TS cells in each freq channel
numTS							= nchannels*nTSperchannel   // total number of TS cells
nTVperchannel					= 0   // number of TV cells in each freq channel
numTV							= nchannels*nTVperchannel   // total number of TV cells
nDSperchannel					= 1   // number of DS cells in each freq channel
numDS							= nchannels*nDSperchannel   // total number of DS cells
nGperchannel					= 1   // number of Golgi cells in each freq channel
numG							= nchannels*nGperchannel   // total number of Golgi cells
HSRsperchannel					= 50
MSRsperchannel					= 0
LSRsperchannel					= 30
seed							= 0         // seed for random number generator
thresh							= -20       // mV   // threshold for detecting spikes


strdef fileroot
sprint(fileroot,"DS_ClickRecovery") // root for output filenames
system("mkdir DS_ClickRecovery")

ttrans							= 10   // ms   // when calculating statistics, ignore
            // spikes occuring before this time
cvode.active(0)
dt								= 0.05   //ms
steps_per_ms					= 10
setdt()
celsius							= 37     //degrees Celsius
secondorder						= 2      // Crank-Nichloson integration method, second order accuracy of voltages and membrane currents

//Input stimulus
   cfhi							= 48000
   cflo							= 200
   dur							= 0.3    //duration of stim (seconds)
   spl							= 100
   ANmodel                      = 7     //7 ZilanyEtAl:2010, 6 Zilany Bruce 2007
   srate						= 500000 // required by version 6, still ok for version 7
   stimtdres					= 1/srate
   sg_rate						= 50000
   sg_tdres						= 1/sg_rate
   stimdelay					= 0.01      //sec
   stimtype						= 11      //Click Recovery
   reps							= 25     //simulation repetions
   species						= 2      //Rat
   nrep							= 1        //nrep is number of repetitions within stimulus
    usesavedfilterbanks			= 1
    tstop						= 300
//Default click times
   objref clicktimes
   clicktimes					= new Vector()
   //   clicktimes.append(20,36,70,74,130,138).mul(srate/1000)
   clicktimes.append(10,26,80,82,150,158,210,214,280,283).mul(srate/1000)


//Optimisation parameters
print "Optimisation parameters"
xopen("pvec.hoc")

// NPARAMS							=7
// objref pvec,fvec,pvec_ranges,pvec_name,pvec_factor
// pvec			  				= new Vector(NPARAMS) //contains the parameters to be fitted
// pvec_ranges						= new Matrix(NPARAMS,2) // (min,max) pairs for each param
// pvec_name						= new List() //names of parameters in String list
// pvec_factor						= new Vector(NPARAMS,1)
// //Initial values
// pvec.x[0]						= 0.001
// pvec.x[1]						= 0.002
// pvec.x[2]						= 0.003
// pvec.x[3]						= 0.001592   //nstomho(2)*qt()
// pvec.x[4]						= 0.00095
// pvec.x[5]						= 0.0007
// pvec.x[6]						= 0.0008
// pvec_factor.x[3]				= 10
// pvec_factor.x[4]				= 10000
// pvec_factor.x[5]				= 1000
 
// pvec_name.append(new String("param.w.x[glg][ds]"))
// pvec_name.append(new String("param.w.x[hsr][ds]"))
// pvec_name.append(new String("param.w.x[lsr][ds]"))
// pvec_name.append(new String("param.ds_gkltbar"))
// pvec_name.append(new String("param.ds_gaba_decay"))
// pvec_name.append(new String("param.ds_gaba_rise"))
// pvec_name.append(new String("param.ds_gleak"))

// //min
//  for i	=0,NPARAMS-1 pvec_ranges.x[i][0]= 0.000001

// //max
//  for i	=0,NPARAMS-1 pvec_ranges.x[i][1]= 0.03

// // cmd is a strdef variable that should be used in local routines and not passed across proc's
// proc set_pvec(){local pp
//     for pp=0,NPARAMS-1 {
//         sprint(cmd,"pvec.x[%d]	= %s / pvec_factor.x[%d]\n",pp,pvec_name.object(pp).s,pp)
//         execute1(cmd)
//     }
// }


 
proc append_num_lsrds_connections(){
	add_opt_param(NPARAMS,0.045,"param.n.x[lsr][ds]",1000,0.001,0.4)	
}

proc append_num_hsrds_connections(){
	add_opt_param(NPARAMS,0.080,"param.n.x[hsr][ds]",1000,0.001,0.4)
}

proc append_num_tvds_connections(){
	add_opt_param(NPARAMS,0.015,"param.n.x[tv][ds]",1000,0.001,0.1)
}

proc append_num_glgds_connections(){
	add_opt_param(NPARAMS,0.005,"param.n.x[glg][ds]",1000,0.001,0.1)
}

proc append_weight_lsrds(){
    add_opt_param(NPARAMS,0.003,"param.w.x[lsr][ds]",1,0.000001,0.2)
}
proc append_weight_hsrds(){
    add_opt_param(NPARAMS,0.0025,"param.w.x[hsr][ds]",1,0.000001,0.2)
}
proc append_weight_tvds(){
    add_opt_param(NPARAMS,0.000130,"param.w.x[tv][ds]",1,0.000001,0.2)
}

proc append_weight_glgds(){
    add_opt_param(NPARAMS,0.000130,"param.w.x[glg][ds]",1,0.0000001,0.1)
}


//DS Cell params
//Initial values for default dstellate model diam=21 um
proc append_ds_ghbar(){ 
	add_opt_param(NPARAMS,0.213972,"param.ds_ghbar",1e-3, 2e-3 ,2)
}
proc append_ds_gnabar(){ 
	add_opt_param(NPARAMS,0.408307,"param.ds_gnabar",1,0.15,0.6)
}
proc append_ds_gkltbar(){
	add_opt_param(NPARAMS,0.0163897,"param.ds_gkltbar",1,0.001,0.04)
}
proc append_ds_gleak(){
	//Leak conductance effects Input resistance and Membrane time constant
	add_opt_param(NPARAMS,0.274146,"param.ds_gleak",1e-3,5e-2,5)
}

proc append_ds_gaba_rise(){
	add_opt_param(NPARAMS,0.7,"param.ds_gaba_rise",1,0.1  ,1.5)
}

proc append_ds_gaba_decay(){
	add_opt_param(NPARAMS,0.009,"param.ds_gaba_decay",1000,2e-3,0.05)//2 to 50 ms
}

proc append_ds_erev(){
	// Reversal potential in dendrite
    add_opt_param(NPARAMS,0.065 ,"param.ds_erev",-1000,0.040,0.080)//
} 


NPARAMS=1
init_params(NPARAMS)
 append_ds_gaba_decay()
// append_ds_gkltbar()
// append_ds_gleak()
// append_ds_erev()
// append_ds_ghbar()
