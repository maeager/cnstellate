/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
 *   TStellate.hoc
 *   Optimise parameters controlling TS cells
 */

load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")

xopen("mathslib.hoc")         // mathematical procedures
xopen("Params.hoc")
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template

//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc")
xopen("pvec_TV_Notch.hoc")
xopen("parameters_TStellate.hoc")

//--- Setup CN Stellate Network model
 xopen("CochlearNucleus.hoc")         // model set-up
// xopen("par_CochlearNucleus.hoc")         // model set-up


 xopen("calcisilag.hoc")

// reset_DS_ClickRecovery()
// param.w.x[hsr][ds]*=10
// param.w.x[ds][tv]/=10
// reset_weights()
// usesavedfilterbanks=1


param.w.x[hsr][ts]  = 0.0005
param.w.x[lsr][ts]    = 0.0005
param.w.x[ds][ts]    = 0.0001
param.w.x[tv][ts]    = 0.0002
param.w.x[glg][ts]    = 0.0005

param.delay.x[hsr][ts]  = 0
param.delay.x[lsr][ts]    = 0
param.delay.x[hsr][ds]    = 0
param.delay.x[lsr][ds]    = 0
param.delay.x[hsr][tv]    = 0.5
param.delay.x[hsr][tv]    = 0.5
param.delay.x[lsr][glg]    = 1


param.n.x[hsr][ts]  = 20
param.n.x[lsr][ts]    = 30
param.n.x[ds][ts]    = 20
param.n.x[tv][ts]    = 20
param.n.x[glg][ts]    = 15

create_cells()
objref nil
// for i=0,99 if(i != 20 || i !=38 || i != 51) tstellate[i][0] = nil
 connect_cells(fileroot)
 connect_CNcells(fileroot)

 xopen("psth.hoc")
 xopen("par_experiment_TStellate.hoc")


strdef datestr,grlbl

objref errorvec,tempcf,indcf,refvec,gr,ref,test,weightvec
gr = new Graph()

func TStellate_err( ) {local jj,pp,xtime,error,penaly,sustainedrate,inputresistance

    //check for bad values
    for pp=0,NPARAMS-1 {
    if (($&2[pp] <= pvec_ranges.x[pp][0]) || ($&2[pp] > pvec_ranges.x[pp][1])) {
      return 1e9
    }
    }
  //print variables
  print "TStellate_err ", $1
    for pp=0,NPARAMS-1 { printf("%s = %g * %g",pvec_name.object(pp).s,$&2[pp],pvec_factor.x[pp])}
  //Set the parameters (see parameters_TStellate.hoc)
  for pp=0,NPARAMS-1 {
    sprint(cmd,"%s = %g * %g ",pvec_name.object(pp).s,$&2[pp],pvec_factor.x[pp])
    execute1(cmd)
    }
  //plot variables
  /*{
    tgr[0].line($&2[0], $&2[1])
    tgr[0].flush()
    tgr[1].line($&2[1], $&2[2])
    tgr[1].flush()
    doNotify()
    print $1, $&2[0], $&2[2], $&2[3]
    }
  */


  reset_weights()
  reset_TStellate()
    RunTStellate()

    //Analyse spikes
    doNotify()
    //CNSpikes2()

    // plot_fitgr()
    objref errorvec,weightvec,ref,test
  errorvec = new Vector()
  //    errorvec.interpolate(ivdata[0],tvec,meaniv)
  //    print a=errorvec.meansqerr(ivdata[1])


  weightvec = new Vector(7,1)
  ref = new Vector(7,0)
  test = new Vector(7,0)

  errorvec.interpolate(tvec,ivdata[0],ivdata[1])
  IVMeasures(tvec,errorvec,ref,2.5)
  IVMeasures(tvec,meaniv,test,2.5)
  PSTHcell(tstellate[whichcell][0].spikes,10,1)
  test.copy(cvISI, 3, 0, 3, 1, 1)
  ref.copy(CV_data, 3, 0, 3, 1, 1)
  
  penalty =0
  sustainedrate = psth.sum(2,6)/25
  if(sustainedrate < 10) penalty += 12 - sustainedrate //penalty for lack of spikes during tone
  if(checkedtrials < 0.9*reps) penalty += 5
  if(cvISI.x[0] > 0.2) penalty += 5
  if(cvISI.x[1] > 0.4 || cvISI.x[1] == 0) penalty += 10
  if(cvISI.x[2] > 0.5 || cvISI.x[2] == 0) penalty += 10
  if(cvISI.x[3] > 0.5 || cvISI.x[3] == 0) penalty += 10
  inputresistance = rn()  
  if(inputresistance < 30 || inputresistance > 400) penalty += 10
//  weightvec.x[0]/=10 //initial depolarisation approx -50 to -30  mV
//  weightvec.x[1]*=20 //adaptation approx 0.2-0.5
//  weightvec.x[2]/=10 //post-tone hyperpolarisation approx 0 to -5 mV
  weightvec.x[3]*=10 //CV
  weightvec.x[4]*=10
  weightvec.x[5]*=10
  weightvec.x[6]*=10
  
  print error=sqrt(ref.meansqerr(test,weightvec))+penalty

    //plot the result
    // gr.erase_all()
    // errorvec.plot(gr,ivdata[0],1,1)
    // ivdata[1].plot(gr,ivdata[0],2,2)
    // sprint(grlbl,"Error = %g", a)
    // gr.label(0.65,0.85,grlbl)
    // for jj=0,NPARAMS-1{
  //   sprint(grlbl,"%s = %g", pvec_name.object(jj).s,pvec.x[jj])
  //   gr.label(0.65,0.75-0.05*jj,grlbl)
    // }
  doNotify()
    return error
}

//tstop=300
proc QuickRun(){
  set_pvec()
    pvec.printf
    print TStellate_err(0,&pvec.x[0])
}

tolerance = 0.0001
maxstepsize = 0.001
printmode = 3
strdef error_fn
error_fn = "TStellate_err"

proc runprax(){
   attr_praxis(tolerance, maxstepsize, printmode)
   fit_praxis(NPARAMS,error_fn,&pvec.x[0])
}



objref pval[NPARAMS]
proc printprax(){local pp,ii,pp2,cur_reps
//Output model data with best parameters
cur_reps = reps
reps=50
sprint(cmd,"mkdir -p %s",fileroot)
system(cmd)
reps=50
print error=TStellate_err(0,&pvec.x[0])
system("date",datestr)
sprint(fname,"%s/%s.Fit.dat",fileroot,origfileroot)
file.wopen(fname)
if (file.isopen()){
file.printf("# %s Optimisation\n",fileroot)
file.printf("# %s \n",datestr)
for pp=0,NPARAMS-1 {
file.printf("#%s = %g\t[%g,%g]\n",pvec_name.object(pp).s,pvec.x[pp]*pvec_factor.x[pp],pvec_ranges.x[pp][0],pvec_ranges.x[pp][1])
}
file.printf("# final error=%f\n",error)
//file.printf("# Principle axis matrix\n")
//for pp=0,NPARAMS-1 {
//pval[pp] = new Vector(NPARAMS)
//pval_praxis(pp,&pval[pp].x[0])
//file.printf("#\t")
//for pp2=0,NPARAMS-1 file.printf("%g\t",pval[pp].x[pp2])
//file.printf("\n")
//}
file.printf("# Time\tError Vec\t Reference Vec (mV)\n")
for ii=0,tvec.size()-1 {
file.printf("%.2f\t%.6f\t%.6f\n",tvec.x[ii],errorvec.x[ii],meaniv.x[ii])
}

file.printf("#Other values \n")
file.printf("#  spl = %g\n",spl)
file.printf("#  tonefreq = %g\n",tonefreq)
param.printparams(file,"#") //let Network Parameters print the struct
file.printf("#\n#IV Measures  Reference Test\n")
file.printf("#RMP\t%g\t%g\n", ivdata[1].mean(0,ivdata[0].indwhere(">",0)),meaniv.mean(ivdata[0].indwhere(">",-10),ivdata[0].indwhere(">",0)))
file.printf("#IVOnset\t%g\t%g\n", ref.x[0], test.x[0])
file.printf("#IVAdaptation\t%g\t%g\n", ref.x[1], test.x[1])
file.printf("#IVOffset\t%g\t%g\n",ref.x[2], test.x[2])
file.printf("#CV0-10\t%g\t%g\n", ref.x[3], test.x[3])
file.printf("#CV10-20\t%g\t%g\n", ref.x[4], test.x[4])
file.printf("#CV20-30\t%g\t%g\n",ref.x[5], test.x[5])
file.printf("#CV30-40\t%g\t%g\n",ref.x[6], test.x[6])
}
file.close()
//Write parameters to general optimisation file
sprint(fname,"%s/pvec_%s.hoc",fileroot,origfileroot)
file.aopen(fname)
file.printf(" // %s  \n",datestr)
for pp=0,NPARAMS-1 {
file.printf("%s = %g*%g\n",pvec_name.object(pp).s,pvec.x[pp],pvec_factor.x[pp])
}
file.close()
reps = cur_reps
PSTHcell(tstellate[whichcell][0].spikes,10,2)
PSTHcell(tstellate[whichcell][0].spikes,1,2)
PSTHcell(tstellate[whichcell][0].spikes,0.25,2)
}






xopen("cngui.hoc")


proc TSPanel(){
  xpanel("TStellate")
  xvalue("tstellate_gnabar_rm")
  xvalue("tstellate_gkhtbar_rm")
  xvalue("tstellate_gleak_rm")
  xvalue("tstellate_erev_rm")
  xvalue("tstellate_ghbar_rm")
  xvalue("tstellate_gkabar_ka")

  xvalue("param.w.x[hsr][ts]")
  xvalue("param.w.x[lsr][ts]")
  xvalue("param.w.x[ds][ts]")
  xvalue("param.w.x[tv][ts]")
  xvalue("param.w.x[glg][ts]")
  xbutton("reset_weights()")
  xbutton("reset_TStellate()")

  xbutton("CS_data","CS_data()")
  xbutton("CT1_data","CT1_data()")
  xbutton("CT2_data","CT2_data()")
//  xbutton("Plot Fit graph","plot_fitgr()")

  xbutton("Run TS model","RunTStellate()")
  xbutton("Run Fitting Procedure","runprax()")
  xbutton("QuickRun","QuickRun()")
  xvalue("PSTH resolution", "binwidth")
  xbutton("PSTH","PSTHcell(tstellate[whichcell][0].spikes,binwidth,1)")
  xbutton("Print PSTH","PSTHcell(tstellate[whichcell][0].spikes,binwidth,2)")

  xpanel()
}

TSPanel()
nrncontrolmenu()

objref nil
for i=0,99 if(!(i == 20 || i == 38 || i == 51)) tstellate[i][0] = nil
access tstellate[whichcell][0].soma
xopen("reset_weights.hoc")
xopen("voltage.ses")
xopen("jitter.hoc")


// param.w.x[lsr][ts] = 0.000774459
// param.w.x[hsr][ts] = 0.000817015
// param.w.x[ds][ts] = 0.0000138011
// param.w.x[tv][ts] = 0.0000146063
// param.w.x[glg][ts] = 9.3936e-05
// tstellate_gleak_rm = 0.000494097
// tstellate_erev_rm=-65
// set_pvec()


// CT1_data()
// RefreshParameters()
// ANFilterBankRun()  //Generate new AN instant. rates
// SetRates2()

// tstellate_erev_rm=-58
// param.w.x[ds][tv]/=10
// param.w.x[hsr][tv]=0.0006
// runprax()
// printprax()
// print "CT1 Done"




// //jitterdelay(0,0.5)

// //param.w.x[lsr][ts] = 0.000901216
// //param.w.x[hsr][ts] = 0.000914421
// //param.w.x[ds][ts] = 0.00146354
// //param.w.x[tv][ts] = 0.00132918
// //param.w.x[glg][ts] = 3.94981e-05
// //tstellate_gleak_rm = 0.00297771


// //param.w.x[lsr][ts] = 0.000774459
// //param.w.x[hsr][ts] = 0.000817015
// //param.w.x[ds][ts] = 0.0000138011
// //param.w.x[tv][ts] = 0.0000146063
// //param.w.x[glg][ts] = 9.3936e-05
// //tstellate_gleak_rm = 0.000294097
// //tstellate_erev_rm=-65
// //reps=50

// param.w.x[lsr][ts] = 0.000774459
// param.w.x[hsr][ts] = 0.000817015
// param.w.x[ds][ts] = 0.0000138011
// param.w.x[tv][ts] = 0.0000146063
// param.w.x[glg][ts] = 9.3936e-05
// tstellate_gleak_rm = 0.000494097
// tstellate_erev_rm=-65
// set_pvec()


// //CS_data()
// //RefreshParameters()
// //ANFilterBankRun()  //Generate new AN instant. rates
// //SetRates2()
// //QuickRun()
//runprax()
//printprax()
//print "CS Done"
// //PSTHcell(tstellate[whichcell][0].spikes,10,2)
// //PSTHcell(tstellate[whichcell][0].spikes,0.25,2)



// //runprax()
// //printprax()
// //print "CT1 Done"

// CT2_data()
// RefreshParameters()
// ANFilterBankRun()  //Generate new AN instant. rates
// SetRates2()
// runprax()
// printprax()
// print "CT2 Done"


// param.w.x[lsr][ts] = 0.000774459
// param.w.x[hsr][ts] = 0.000817015
// param.w.x[ds][ts] = 0.0000138011
// param.w.x[tv][ts] = 0.0000146063
// param.w.x[glg][ts] = 9.3936e-05
// tstellate_gleak_rm = 0.000294097
// tstellate_erev_rm=-65
// set_pvec()

// CT2_data()
// RefreshParameters()
// ANFilterBankRun()  //Generate new AN instant. rates
// SetRates2()
// QuickRun()
// runprax()
// printprax()
// print "CT2 Done"

// //RunTStellate()

