/*
 *	par_golgi_test2.hoc
 *
 */
load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")
thresh=-20

xopen("mathslib.hoc")// mathematical procedures
xopen("Params.hoc")
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")	// CN cell template
xopen("parameters_ClickDelay.hoc") // model parameters	

objref an,golgi[nchannels][1],g
objref  ANFBgr,  Sout[nchannels]
objref stimgr,b1,gr

 ghoshalkim_position = 86 
// equates to position in CN model of 22.6kHz correponding to unit S03-07 (22.7kHz CF)

objref  ANFBgr, b2, Sout[nchannels]
changescale=1
scale = 60
proc ShowInputGraphs() {
	objref stimgr, b1, gr
	objref  ANFBgr, b2, Sout[nchannels]
	b1 = new VBox()
	b1.intercept(1)
	stimgr = new Graph(0)
	stimgr.view(0, -0.01, 0.042, 0.02, 308, 88, 685, 150)
	stimgr.label(0.1, 0.91, grlbl)
	stimgr.label(0.0, 0.65, "Amplitude  (uPascals)")
	stimgr.label(0.85, 0.35, "time (ms)")	
	stim.plot(stimgr, stimtdres)
	stimgr.exec_menu("View = plot")
	//b1.intercept(0)
	//b1.map("Stimulus waveform",360, 0, 650.7, 193.5)


	//b1.intercept(1)
	ANFBgr = new Graph(0)
	ANFBgr.size(0,0.05,0,180000)
	ANFBgr.view(0, 0, 0.05, 180000, 308, 345, 685, 365)
	ANFBgr.label(0.92,0.90, "CF")
	ANFBgr.label(0.1,0.95,"Auditory Filterbank Instantaneous Rate Profiles")
	for icf = 0, nchannels-1 {
	    Sout[icf] = HSRout[icf].c
	    Sout[icf].mul(2).add(6000*icf)
	    Sout[icf].plot(ANFBgr,sg_tdres, 1, 0)
	    sprint(lbl, "%g ", cf.x[icf])
	    ANFBgr.label(0.92, 0.810*(icf/(nchannels-1))+0.075, lbl)
	}
	//system("date")
	ANFBgr.exec_menu("View = plot")
	b1.intercept(0)
	b1.map("Stimulus and Auditory Filterbank",308, 345, 685, 365)
	

}//Dummy Graphs

proc ShowGolgiGraphs() {
	objref  ANFBgr,  Sout[nchannels]
	ANFBgr = new Graph(0)
	ANFBgr.size(0,0.05,0,180000)
	ANFBgr.view(0, 0, 0.05, 180000, 308, 345, 685, 365)
	ANFBgr.label(0.92,0.90, "CF")
	ANFBgr.label(0.1,0.95,"Auditory Filterbank Instantaneous Rate Profiles")
	for icf = 0, nchannels-1 {
		Sout[icf] = golgi[icf][0].sout.c
	Sout[icf].add(icf)
		Sout[icf].plot(ANFBgr,sg_tdres, 1, 0)
		sprint(lbl, "%g ", cf.x[icf])
		ANFBgr.label(0.92, 0.810*(icf/(nchannels-1))+0.075, lbl)
	}
	//system("date")
	ANFBgr.exec_menu("View = plot")
	print "To save graph type: ANFBgr.printfile(\"x.eps\")"
}//Dummy Graphs

	count = 0

//Setup Auditory model
	ANmodel= 7//Zilany et al 2009,2010 v4  model
	species= 1	//Cat
	cfhi=40000
	cflo=200
	tonefreq = 22700 //Ghoshal and Kim 1997 unit S03-07
	dur= 0.0475 //duration of tone segment (seconds)	
	dutycycle= 0.2	//quiet duration = dutycycle*dur
	ramplngth= 0.0025
	stimdelay= 0.02	//sec
	srate = 100000.0
	stimtdres = 1/srate
	sg_rate = 50000		
	sg_tdres = 1/sg_rate
	stimtype=1 //tone stimulus
	reps=25
	nrep = 1 //nrep is number of reps of stimulus
	
	ANFBgr = new Graph()
	usesavedfilterbanks=1
	
	reps=25
	binsize=0.1

	objref ANFBgr
	RefreshCF()	
	RefreshParameters()
	ANFilterBankRun()
//	an.SetRates()
//	ShowInputGraphs()


objref an,golgi[nchannels][1],g, ANFBgr
an = new AuditoryNerve()
for i=0,99 {
   for j = 0, HSRsperchannel-1 {
      //sprint(celltype,"new SGC_fast(%d,%d,%d)",4,cf.x[i],i)
      an.HSR[i][j] = new SGC_fast(0.5)
    }
    for j = 0, LSRsperchannel-1 {
      //sprint(celltype,"new ANF(%d,%d,%d)",5,cf.x[i],i)
      an.LSR[i][j] = new SGC_fast(0.5)
    }
     golgi[i][0] = new Golgicell(3,cf.x[i],i,2)
}

proc SetRates(){local i
   an.SetRates()
   for i=0,99 golgi[i][0].SetRate2()
}

proc GenInputSpikes(){local j
   an.GenSpikes()
  for i=0,99 golgi[i][0].GenSpikes()
}

proc SaveSpikes(){local i
 //  an.SaveSpikes()
   for i=0,99 golgi[i][0].SaveSpikes()
}

proc ClearSpikes(){local i
    golgi[ghoshalkim_position][0].ClearSpikes()
}

objref ind,isi
isistdev =0
func meanrate(){ local i localobj spikes
// Take in a spike vector ( presume an appended vector of 50 spike trains)
// remove values less than the stimulus delay
// calculate intervals, remove negative intervals,
// mean rate is the inverse of the isi mean
   objref ind,isi
   spikes = new Vector()
   if ($o1.size < 60) {
      isistdev = 10
      return $o1.size()/(reps*0.05)
   }
   spikes.copy($o1)
   ind = new Vector()
   isi = new Vector()
   ind.indvwhere(spikes,"<",stimdelay*1000)
   if (spikes.size -ind.size <= 5) {
      isistdev = 10
      return spikes.size()/(reps*0.05)
   }
   if (ind.size > 0) for i=0, ind.size-1 { spikes.remove(ind.x[i]-i) }
print "print spikes.size", spikes.size
   for i=1,spikes.size-1 {
      isi.append( spikes.x[i]-spikes.x[i-1])
   }
print "print isi.size", isi.size

   ind.indvwhere(isi,"<=",0)
   if (isi.size -ind.size <= 10) {
      isistdev = 10
      return spikes.size()/(reps*0.05)
   }
   if (ind.size > 0) for i=0, ind.size-1 { isi.remove(ind.x[i]-i)
print "removing ", ind.x[i] }
   ind.indvwhere(isi,">",50)
   if (ind.size >= 1) {
    if (isi.size -ind.size <= 3) {
      isistdev = 15
      return spikes.size()/(reps*0.05)
    }
    for i=0, ind.size-1 { isi.remove(ind.x[i]-i)
print "removing ", ind.x[i] }
   }
print "print isi.size", isi.size

   if (isi.size <= 1) {
      isistdev = 1e6
      return spikes.size()/(reps*0.05)
   }

   isistdev = isi.stdev()
   return 1000/isi.mean()
}


objref gpstlist, grate[nchannels],anrate[nchannels],rate_level_graph, gstdev[nchannels],level,fvec
proc RatelevelGolgi1(){local ispl,i,j,count,sum,runtime,cell,xtime localobj tmp
   //objref Notchgr,results[sp.cells.count], Notch

   count = 0
   tonefreq = 22700 
   dur       = 0.049    //duration of tone segment (seconds)
   dutycycle    = 0.2      //quiet duration = dutycycle*dur
   ramplngth    = 0.001
   srate       = 200000.0  
   stimtdres    = 1/srate
   sg_rate = 50000      
   sg_tdres = 1/sg_rate
   stimdelay = 0.02      //sec
   stimtype=1   //tone
   reps=250
   gpstlist = new List()
   for i=0,99 {
      grate[i] = new Vector()
      anrate[i] = new Vector()
      gstdev[i] = new Vector()
   }
   fvec = new Vector()
   //RefreshParameters()
   //ANFilterBankRun()
   for ispl=0,level.size-1 {
   spl = level.x[ispl]
      runtime = startsw()
      ClearSpikes()
      RefreshParameters()

      ANFilterBankRun()
      SetRates()

      for j=0, reps-1{
         GenInputSpikes()
         print j
         SaveSpikes()
         //print startsw()-x, "secs"
      }

      for j=0,99 {
      sum=0
         grate[j].append(meanrate(golgi[j][0].spikes))
         gstdev[j].append(isistdev)
         for i=0,LSRsperchannel-1 sum+= meanrate(an.LSRspiketimes[j][i])
         anrate[j].append(sum/(LSRsperchannel))
      }
      fvec.append(golgi[ghoshalkim_position][0].sout.mean(2000,3000))
      count+=1
      runtime = startsw()-runtime
      print "Simulation took ",runtime, " secs "
   }

   rate_level_graph = new Graph()
   fvec.plot(rate_level_graph,2,2)
   grate[ghoshalkim_position].plot(rate_level_graph)
   anrate[ghoshalkim_position].plot(rate_level_graph)
   rate_level_graph.exec_menu("View = plot")

}//RatelevelGolgi1

proc NoiseRatelevelGolgi1(){local ispl,i,j,count,sum,runtime,cell,xtime localobj tmp
   //objref Notchgr,results[sp.cells.count], Notch

   count = 0

   dur       = 0.049    //duration of tone segment (seconds)
   dutycycle    = 0.2      //quiet duration = dutycycle*dur
   ramplngth    = 0.001
   srate       = 200000.0  
   stimtdres    = 1/srate
   sg_rate = 50000      
   sg_tdres = 1/sg_rate
   stimdelay = 0.02      //sec
   stimtype=6   //tone
   reps=250
   gpstlist = new List()
   for i=0,99 {
      grate[i] = new Vector()
      anrate[i] = new Vector()
      gstdev[i] = new Vector()
   }
   fvec = new Vector()
   //RefreshParameters()
   //ANFilterBankRun()
   for ispl=0,level.size-1 {
   spl = level.x[ispl]
      runtime = startsw()
//      ClearSpikes()
      RefreshParameters()
      ANFilterBankRun()
      SetRates()

//      for j=0, reps-1{
//         GenInputSpikes()
//         print j
//         SaveSpikes()
         //print startsw()-x, "secs"
//      }

      for j=0,99 {
      sum=0
         grate[j].append(golgi[j][0].sout.mean(1000,3500))
//         gstdev[j].append(isistdev)
         anrate[j].append(LSRout[j].sout.mean(1000,3500))

      }
      fvec.append(golgi[ghoshalkim_position][0].sout.mean(1000,3500))
      count+=1
      runtime = startsw()-runtime
      print "Simulation took ",runtime, " secs "
   }

   rate_level_graph = new Graph()
   fvec.plot(rate_level_graph,2,2)
   grate[ghoshalkim_position].plot(rate_level_graph)
   anrate[ghoshalkim_position].plot(rate_level_graph)
   rate_level_graph.exec_menu("View = plot")

}//NoiseRatelevelGolgi1



	
////Simplex method		

objref gr, targetrl, rlst,level
level = new Vector(22)
level.indgen().mul(5).add(-15)
targetrl = new Vector()
targetrl.append(2.53,	2.14,	4.28,	6.24,	7.80,	12.10,	10.73,	13.47,	17.96,27.92,30.27,	32.81,	39.84,	51.75,	57.42,	58.00,	58.79,	62.11,	68.75,	82.62,	92.38,	100.78)
gr = new Graph()
rlst = new List()
targetrl.plot(gr,level,2,2)
gr.size(-20,100,0,150)
gr.exec_menu("Keep Lines")


objref g, dvec, fvec,ivec
//g = new Graph()

//g.size(0,3,0,3)

func fun() {local f
        if ($1 == 90) {
                g.line($2, $3)
                g.flush()
		//doNotify()
		print $1, $2, $3
		}	
	spl=$1
	weight_sum=$2
	golgi_spon=$3
	runtime = startsw()
	golgi[ghoshalkim_position][0].ClearSpikes()
	RefreshParameters()
	sg_rate=50000
	ANFilterBankRun()
	sg_rate = 50000
	sg_tdres = 1/sg_rate
	golgi[ghoshalkim_position][0].SetRate2()
	
	/*		
	for j=0, reps-1{
	    //golgi[ghoshalkim_position][0].GenSpikes()
	    print j
	    //golgi[ghoshalkim_position][0].SaveSpikes()
	    //print startsw()-x, "secs"
	}
	runtime = startsw()-runtime
	print "Simulation took ",runtime, " secs "
	
	return golgi[ghoshalkim_position][0].spikes.size()/(reps*0.05)
	*/
    return golgi[ghoshalkim_position][0].sout.mean(2000,3000)
}


objref vv


dvec = new Vector()
ivec = new Vector()
reps = 10

vv = new Vector()
vv.append(3,6,14,18,20,22)
dvec = targetrl.ind(vv)
ivec = level.ind(vv)
fvec = new Vector(4)
//fvec.fill(0)

a = 1.5
b = 3.5

proc RunFit(){
g.beginline()
error = dvec.fit(fvec, "fun", ivec, &a, &b)
print a, b, error
g.flush()
g.exec_menu("View = plot")
fvec.plot(Graph[0],ivec,1,1)
}
//RunFit()



////Praxis method

print "Setup parameters"
NPARAMS=4
objref pvec,fvec,gg,lsrvec,hsrvec,pvec_ranges
pvec = new Vector(NPARAMS) //Should contains the parameters to be fitted
pvec.x[0]= 2.5  //gvar lsr
pvec.x[1]= 0.5 //weight_LSR
pvec.x[2]= 0.05 //weight_HSR
pvec.x[3]= 3.63 //spon

pvec_ranges= new Matrix(NPARAMS,2)
//min
 for i=0,NPARAMS-1 pvec_ranges.x[i][0]= 0
//max
 for i=0,NPARAMS-1 pvec_ranges.x[i][1]= 10


gg = new Graph()
pvec.printf()
fvec = new Vector(level.size(),0)
lsrvec = new Vector(level.size(),0)
hsrvec = new Vector(level.size(),0)
//tonefreq = cf.x[ghoshalkim_position]

func fun2() {local j	
	runtime = startsw()
    //an.LSRspikes[ghoshalkim_position][0].resize(0)
	//golgi[ghoshalkim_position][0].ClearSpikes()
	RefreshParameters()
	ANFilterBankRun()
    SetRates()
    CreateGolgiSynFilter()
    golgi[ghoshalkim_position][0].SetRate2()
    
    /*	for j=0, reps-1{
	//golgi[ghoshalkim_position][0].GenSpikes()
	//	print j
	//	golgi[ghoshalkim_position][0].SaveSpikes()
    //    an.LSRspikes[ghoshalkim_position][0].append(an.LSRspiketimes[ghoshalkim_position][0].c)
			//print startsw()-x, "secs"
	}


//	return golgi[ghoshalkim_position][0].spikes.size()/(reps*0.05)
*/	
    runtime = startsw()-runtime
	print "Simulation took ",runtime, " secs "
  return golgi[ghoshalkim_position][0].sout.mean(2000,3000)
}
objref tgr[5]
//for i=0,4 tgr[i] = new Graph()
a=0
func err(){local ii,pp

   //weight_sum =$&2[0]
   //golgi_spon=$&2[0]    //$1
   //golgi_spatial_filter_stdev  //$2
   //golgi_syn_filter_scale_factor=$&2[2]  //$3
    //print "Parameters: ", weight_sum,golgi_spon, golgi_syn_filter_scale_factor //golgi_spatial_filter_stdev,

    //Modify Parameters
    //
    golgi_spatial_filter_variance_LSR=$&2[0]
    weight_sum_LSR = $&2[1]
    weight_sum_HSR= $&2[2]
    golgi_spon=$&2[3]

    // check for bad values
   for pp=0,NPARAMS-1 {
    if ($&2[pp] <= pvec_ranges.x[pp][0] || $&2[pp] > pvec_ranges.x[pp][1]){
     return 1e9
     }
    }
    //show variables
    /*      {
        tgr[0].line($&2[0], $&2[1])
        tgr[0].flush()
        tgr[1].line($&2[1], $&2[2])
        tgr[1].flush()
	doNotify()
	print $1, $&2[0], $&2[2], $&2[3]
    }
    */
    fvec = new Vector(level.size(),0)
    for ii = 0,level.size()-1 {
        spl=level.x[ii]
        fvec.x[ii] = fun2()
        print "Level: ", level.x[ii] , " Rate: ", fvec.x[ii]
        lsrvec.x[ii] = LSRout[ghoshalkim_position].mean(2000,3000)//an.LSRspikes[ghoshalkim_position][0].size()/(reps*0.05)
       // hsrvec.x[ii] = HSRout[ghoshalkim_position].mean(2000,3000)
    }
    fvec.plot(gg,level,2,3)
    targetrl.plot(gg,level,3,4)
    lsrvec.plot(gg,level,4,2)
    //hsrvec.plot(gg,level,5,2)

    gg.exec_menu("View = plot")
    gg.flush()
    doNotify()
    a =fvec.meansqerr(targetrl)
        print "Error: ", a
    return a
}

RefreshParameters()
//ANFilterBankRun()

//for i=0,1 tgr[i].beginline()

golgi_spatial_filter_variance_HSR=0.5
golgi_spatial_filter_variance_LSR=2.5

proc StartPraxis(){	
attr_praxis(1, 0.1, 3)
for k = 0,10 fit_praxis(NPARAMS,"err",&pvec.x[0])
//
print "final error:", fvec.meansqerr(targetrl)
print "Parameters: "
pvec.printf()
gg.flush()
}

//////////////////////////////////////////////////////////////////////////////
//handtuning
//golgi_spatial_filter_variance_LSR
//2.48 20.949
//2.47 20.948
//2.46 20.490?


//Final praxis results (attr -> 1,0.1,3) 8/9/09
proc PrintFinalResults(){
  //golgi_spatial_filter_variance_LSR= 2.48372
  //weight_sum_LSR = 0.516646
  //weight_sum_HSR= 0.04872
  //golgi_spon=3.7271

 RatelevelGolgi1()
   if (file.isopen()) file.close()
//
    file.wopen("GolgiRateLevel.dat")
    file.printf("# Golgi model rate-level data\n")
    file.printf("# Spatial filter: Stdev of LSR input channels=%.4f\n",golgi_spatial_filter_variance_LSR)
    file.printf("# Synaptic Filter: Tau = 5ms, Scale_factor=%.2f\n",golgi_syn_filter_scale_factor)
    file.printf("# Weighted sum of LSR = %.4f \n",weight_sum_LSR)
    file.printf("# Weighted sum of HSR = %.4f \n",weight_sum_HSR)
    file.printf("# Golgi Spontaneous rate = %.4f\n",golgi_spon)
    file.printf("# SPL\tRate (sp/sec)\t Stdev\n")
    for i=0,level.size()-1 { file.printf("%d\t%.3f\t%.3f\t%.3f\t%.3f\n",level.x[i],grate[ghoshalkim_position].x[i],gstdev[ghoshalkim_position].x[i],fvec.x[i], targetrl.x[i]) }
    file.close()
}
//PrintFinalResults()


/* proc PrintFinalResults(){ */
/* attr_praxis(1, 0.1, 3) */
/* for k = 0,5 fit_praxis(NPARAMS,"err",&pvec.x[0]) */

/*  RatelevelGolgi1() */
/*    if (file.isopen()) file.close() */

/*     file.wopen("GolgiRateLevel.dat") */
/*     file.printf("# Golgi model rate-level data\n") */
/*     file.printf("# Spatial filter: Stdev of LSR input channels=%.4f\n",golgi_spatial_filter_variance_LSR) */
/*     file.printf("# Synaptic Filter: Tau = 5ms, Scale_factor=%.2f\n",golgi_syn_filter_scale_factor) */
/*     file.printf("# Weighted sum of LSR = %.4f \n",weight_sum_LSR) */
/*     file.printf("# Weighted sum of HSR = %.4f \n",weight_sum_HSR) */
/*     file.printf("# Golgi Spontaneous rate = %.4f\n",golgi_spon) */
/*     file.printf("# Final err(0,&pvec.x[0]) = %.8f\n",err(0,&pvec.x[0])) */

/*     file.printf("# SPL\tRate (sp/sec)\t Stdev\n") */
/*     for i=0,level.size()-1 { file.printf("%d\t%.3f\t%.3f\t%.3f\t%.3f\n",level.x[i],grate[ghoshalkim_position].x[i],gstdev[ghoshalkim_position].x[i],fvec.x[i], targetrl.x[i]) } */
/*     file.close() */
/* } */
//PrintFinalResults()


load_file("cngui.hoc")


//dur=0.2
//stimtype=2
usesavedfilterbanks=1
objref mygr[4],ihc
RefreshParameters()
// RatelevelGolgi1()
