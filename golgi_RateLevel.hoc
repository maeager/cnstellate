/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */
/*
*   golgi_RateLevel.hoc
*
*/
load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")

xopen("mathslib.hoc")         // mathematical procedures
xopen("Params.hoc")
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template
xopen("parameters_golgi_RateLevel.hoc")           // model parameters
xopen("CochlearNucleus.hoc")         // model set-up


objref an,golgi[nchannels][1],g
an = new AuditoryNerve()
for i=0,99 {
	for j = 0, HSRsperchannel-1 {
		//sprint(celltype,"new SGC_fast(%d,%d,%d)",4,cf.x[i],i)
		an.HSR[i][j] = new SGC_fast(0.5)
    }
    for j = 0, LSRsperchannel-1 {
		//sprint(celltype,"new ANF(%d,%d,%d)",5,cf.x[i],i)
		an.LSR[i][j] = new SGC_fast(0.5)
    }
    golgi[i][0] = new Golgicell(3,cf.x[i],i,2)
}








//Setup Auditory model

cfhi        = 64000
cflo        = 200
dur         = 0.08    //duration of stim (seconds)
srate       = 100000.0
stimtdres   = 1/srate
sg_rate     = 50000
sg_tdres    = 1/sg_rate
stimdelay   = 0.01      //sec
stimtype    = 2      //Silence
reps        = 25
ANmodel     = 6      //Zilany Bruce model
species     = 2      //Rat
nrep        = 1        //nrep is number of reps of stimulus


ANFBgr = new Graph()
usesavedfilterbanks=0
/*
ANFilterBankRun()   //Build the filterbank
an.SetRates()      //Allocate filterbanks to ANFs
ShowInputGraphs()

*/

//ShowGolgiGraphs()

//D-stellate Click train PSTH   (Backoff et al. 1997
objref gr,targetclick, dslist,clicktimes,stim

//Input stimuli
objref clicktimes
clicktimes = new Vector()
clicktimes.append(20,22,40,44,60,68).mul(srate/1000)



//Target response
//Fraction of repetitions that ellicit a response
targetclick = new Vector()
targetclick.append(1,0.2,1,0.45,1,0.6)

srate = 100000
stimtdres = 1/srate
stim = new Vector(int(dur/stimtdres),0)
for i=0,clicktimes.size-1{
	for j=0,20 stim.x[clicktimes.x[i]+j] = spl2ampl(180)
}
reps = 25
binsize = 0.2


stim.plot(ANFBgr,stimtdres)
ANFBgr.exec_menu("View = plot")
ANFBgr.printfile("Clickstim.eps")
objref ANFBgr

ANFilterBankRun()
an.SetRates()
ShowInputGraphs()
ANFBgr.printfile("ClickFB.eps")


proc SetRates(){
	
	an.SetRates()
	for i=0,99 golgi[i][0].SetRates()
	
}

proc GenInputSpikes(){local i
	an.GenSpikes()
	for i=0,99 golgi[i][0].GenSpikes()
}

proc SaveSpikes(){local i
	//an.SaveSpikes()
	//for i=0,99
	i=76
	golgi[i][0].SaveSpikes()
}
proc ClearSpikes(){local i
	an.ClearSpikes()
	for i=0,99 golgi[i][0].ClearSpikes()
}

objref gpstlist, grate[nchannels],anrate[nchannels],rate_level_graph
proc RatelevelGolgi1(){local i,j,count,sum,runtime,cell,xtime localobj tmp
	//objref Notchgr,results[sp.cells.count], Notch
	
	count		= 0
	tonefreq	= golgi[76][0].cf
	dur			= 0.049    //duration of tone segment (seconds)
	
	dutycycle   = 0.2      //quiet duration = dutycycle*dur
	ramplngth   = 0.001
	srate       = 500000.0  stimtdres    = 1/srate
	sg_rate		= 50000      sg_tdres = 1/sg_rate
	stimdelay   = 0.02      //sec
	stimtype	= 1   //tone
	reps		= 25
	gpstlist	= new List()
	for i=0,99 {
		grate[i] = new Vector()
		anrate[i] = new Vector()
	}
	//RefreshParameters()
	//ANFilterBankRun()
	for (spl = -20; spl <= 95; spl+=5){
		runtime = startsw()
		ClearSpikes()
		RefreshParameters()
		sg_rate=50000
		ANFilterBankRun() sg_rate = 50000 sg_tdres = 1/sg_rate
		ResetInput()
		
		for j=0, reps-1{
			GenInputSpikes()
			print j
			SaveSpikes()
			//print startsw()-x, "secs"
		}
		
		for j=0,99 {
			sum=0
			grate[j].append(golgi[j][0].spikes.size()/(reps*0.05))
			for i=0,LSRsperchannel-1 sum+= an.LSRspikes[j][i].size
			anrate[j].append(sum/(LSRsperchannel*reps*0.05))
		}
		
		
		count+=1
		runtime = startsw()-runtime
		print "Simulation took ",runtime, " secs "
	}
	
	rate_level_graph = new Graph()
	grate[76].plot(rate_level_graph)
	anrate[76].plot(rate_level_graph)
	rate_level_graph.exec_menu("View = plot")
}



count			= 0
tonefreq		= golgi[76][0].cf
dur				= 0.049    //duration of tone segment (seconds)

dutycycle		= 0.2      //quiet duration = dutycycle*dur
ramplngth		= 0.001
srate			= 500000.0
stimtdres		= 1/srate
sg_rate			= 50000
sg_tdres		= 1/sg_rate
stimdelay		= 0.02      //sec
stimtype		= 1   //tone
reps			= 25




objref gr, targetrl, rlst,level
level = new Vector(22)
level.indgen().mul(5).add(-15)
targetrl = new Vector()
targetrl.append(2.53,   2.14,   4.28,   6.24,   7.80,   12.10,   10.73,   13.47,   17.96,27.92,30.27,   32.81,   39.84,   51.75,   57.42,   58.00,   58.79,   62.11,   68.75,   82.62,   92.38,   100.78)
gr = new Graph()
rlst = new List()
targetrl.plot(gr,level,2,2)
gr.size(-20,100,0,150)
gr.exec_menu("Keep Lines")


objref g, dvec, fvec,ivec
g = new Graph()
g.size(0,3,0,3)

func fun() {local f
    if ($1 == 90) {
        g.line($2, $3)
        g.flush()
		//doNotify()
		print $1, $2, $3
    }
	spl			= $1
	weight_sum	= $2
	golgi_spon	= $3
	runtime		= startsw()
    golgi[76][0].ClearSpikes()
    RefreshParameters()
    sg_rate		= 50000
    ANFilterBankRun()
    sg_rate		= 50000
    sg_tdres	= 1/sg_rate
    golgi[76][0].SetRate()
	
    for j=0, reps-1{
        golgi[76][0].GenSpikes()
        print j
        golgi[76][0].SaveSpikes()
        //print startsw()-x, "secs"
    }
    runtime = startsw()-runtime
    print "Simulation took ",runtime, " secs "
	
	return golgi[76][0].spikes.size()/(reps*0.05)
	
}


objref vv


dvec = new Vector()
ivec = new Vector()
reps = 50

vv = new Vector()
vv.append(3,6,14,18,20,22)
dvec = targetrl.ind(vv)
ivec = level.ind(vv)
fvec = new Vector(4)
//fvec.fill(0)

a = 1.5
b = 3.5

proc RunFit(){
	g.beginline()
	error = dvec.fit(fvec, "fun", ivec, &a, &b)
	print a, b, error
	g.flush()
	g.exec_menu("View = plot")
	fvec.plot(Graph[0],ivec,1,1)
}
RunFit()

