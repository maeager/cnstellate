
forall {Ra = 150 cm=0.9}
// *** Set-up recording
objref dsvec, tvec
record_step = 0.1
record_vec_size = int(tstop/record_step)+1
dsvec = new Vector(record_vec_size)
tvec = new Vector(record_vec_size)

//iclamp = new Vector(record_vec_size)
record_step = 0.1
if (pnm.gid_exists(dsgid.x[icentre][0])) dsvec.record(&dstellate[icentre][0].soma.v(0.5),record_step)
if (pnm.myid == 0) tvec.record(&t,record_step)



proc post_record() {
	if (pnm.gid_exists(dsgid.x[icentre][0])) pnm.pc.post("dsvec", dsvec)
}
proc take_record() {
	pnm.pc.context("post_record()")
	if (!pnm.pc.gid_exists(dsgid.x[icentre][0])) pnm.pc.take("dsvec", dsvec)
}

// *** Process data and print out results
xopen("par_calcisilag.hoc") // everybody needs this for the post_results

proc print_results() {
  print_raster(fileroot)
  print_an_raster(fileroot)
  print_an_hist(1,fileroot)
  sprint(filename,"%s.curvs",fileroot)
  outfile.wopen(filename)
  take_record()
  for i = 0, tvec.size()-1 {
  if (i>=dsvec.size() || i>=vstel.size() || i>=vtv.size()) break
    outfile.printf("%8.3g %8.3g %8.3g %8.3g \n",tvec.x[i],dsvec.x[i],vstel.x[i],vtv.x[i])
  }
  outfile.close()
  print "Results printed to files"
}




xpanel("MTF")
xbutton("Modulation Transfer Function", "ModulationTransferFunction()")
xbutton("Modulation Transfer Function Stims", "MTFStim()")
xpanel()






load_file("cngui.hoc")

usesavedfilterbanks=1


GenSpikes() //calls SGfast(1) on each fibre
                //it might be quicker to use another method
                //eg. calling the original zbcatmodel and
                //outputing several spike trains
                //since ANFs are just VecStims

//ModulationTransferFunction()
		
//xopen("SAM.ses")
