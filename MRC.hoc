/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */


/***********************************************************
**	Masked Response Area and Curve function from: 
**  Rhode WS and Greenberg S. Lateral suppression and 
**  inhibition in the cochlear nucleus of the cat. J Neurophysiol 71: 493-514, 1994.
Stimulus 
RA... Average-rate Response Area (RA) 
a set of isointensity curves plotted on a frequency axis, to
determine the neurons threshold, characteristic frequency (CF),
spontaneous discharge rate, and frequency selectivity ( Q10 = CF/
bandwidth at 10 dB above rate threshold ). 

50-ms tone, 250ms silence
reps = five 
SPL varied from  -10 dB to 80 dB SPL in 10-dB steps. 
Stimulus frequency was systematically
varied from either lowest to highest or vice versa, with the size of
the frequency step usually equal to ~5% of the estimated CF.

MRA...

(Geisler and Sinex 1980: Rhode et al. 1978 ). 
Masking refers to the ability of the noise to alter a cells selective 
responsiveness to tones of variable frequency
and SPL. The presence of the noise induces the cell to
discharge at a rate that is sufficient to swamp its response for tones,
often 10 to 20 dB above rate threshold. In this sense the noise acts
to mask the RA functions generated by the tonal stimuli presented
alone that produce discharge rates lower than the noise does.
It is important to note that in all instances noise onset and offset
were concurrent with that of the tonal stimulus. The level chosen
for the noise background was that which drove the neuron at approximately
half of the maximum driven discharge rate for noise,
typically 100-200 spikes/s. 
Occasionally the cells discharge did not saturate, even at the highest SPL 
used ( 110 dB). For these
units the NL used evoked a discharge rate that was ~50%) of the
maximum driven level recorded at 110 dB.
The stimulus parameters for the MRA were similar to that of the RA with respect to tone duration, 
repetition interval, number of stimulus repetitions, and SPL range. 
However, the upper frequency
range of the tone-burst stimulus was usually set to at least
one octave above the unit CF to ensure that the full extent of the
upper suppressive region was delineated.

MRC... Masked Response Curve

CF tone + noise  vary tone SPL+ noise SPL

In addition to the MRA, masked rate-intensity curves ( MRCs)
were also obtained. For each NL (typically varied over a lOO-dB
range in 20-dB steps) an RC at the units CF was obtained. Signal
duration, repetition interval, and SPL were similar to those for
used for recording the NRC.

Suppression of noise-driven activity by a tone is measured by 
percent reduction of the noise-driven discharges at a 70-dB SPL
tone level and the bandwidth of the inhibitory region beyond CF is
measured at a stimulus level of 70 dB SPL using a 50% reduction
criteria.

***********************************************************/
objref MRA[sp.cells.count],MRAgr, mrafreq
strdef mrastr

NoiseRateTS = 0
proc NoiseRate(){localobj psth
	reps=25
	AdditiveNoise = 0

	stimtype = 4	//Wideband noise
	tonefreq 	= 0	//Hz
	dur 		= 0.095 	//duration of tone segment (seconds)
	spl 		= 50 		//dB SPL of tone 
	dutycycle 	= 0		//quiet duration = dutycycle*dur
	ramplngth 	= 0.005
	srate 		= 50000.0  
	stimtdres 	= 1/srate
	sg_rate 	= 10000		
	sg_tdres 	= 1/sg_rate
	nrep		= 1  		//nrep is number of reps in one stimulus
	stimdelay 	= 0.00		//sec
	RefreshParameters()
	ANFilterBankRun()
	sp.FlushSpks()	
	an.flag(0)
	an.reset()
	// Perform multiple runs
	for j=0, reps-1{ 
		run3() 
		sp.SaveSpks()
	//	flushPlot() 
	//	{doNotify()}
	}
	MeanRate()
	psth = Mspikes[0].histogram(0, 100,0.1)
	NoiseRateTS = psth.sum(500,1000)/(reps*0.05)
	print " Noise Rate = ", NoiseRateTS
//	{doNotify()}
	
}
objref mratimes,psth
reps=10
proc MaskedResponseArea(){local i,j,count,sum, channel, hi, lo,runtime, incr, startf, stopf 
	objref MRA[sp.cells.count],MRAgr, mrafreq,psth
	//objref mratimes
	psth=new Vector(1001)
	mrafreq = new Vector()
startf = startsw()
	for i=0,sp.cells.count-1 { MRA[i] = new Vector() }
//	mratimes = new Vector()
	count=0
	reps=$1
	AdditiveNoise = 1
	NoiseLevel = 50		//dbSPL max amplitude
	stimtype = 1
	tonefreq 	= cf.x[icentre]	//Hz
	dur 		= 0.095 	//duration of tone segment (seconds)
	spl 		= 70 		//dB SPL of tone 
	dutycycle 	= 0		//quiet duration = dutycycle*dur
	ramplngth 	= 0.005
	srate 		= 50000.0  
	stimtdres 	= 1/srate
	sg_rate 	= 10000		
	sg_tdres 	= 1/sg_rate
	nrep		= 1  		//nrep is number of reps in one stimulus
	stimdelay 	= 0.00		//sec
	
	
//	stopf = startsw() //int(cf.x[icentre]*2/10)*10
//	startf = int(cf.x[icentre]/20)*10
//	incr = int(cf.x[icentre]*0.05/10)*10
//	print startf, ", ", stopf, ", ", incr

        
	//NoiseRate()
	an.flag(0)

	//for(tonefreq=startf;tonefreq<stopf && stoprun==0; tonefreq+=incr){
	for channel = icentre-15, icentre+15 {
		runtime = startsw()
//		mratimes.resize(0)
		tonefreq = cf.x[channel]
		mrafreq.append(tonefreq)
		
		//RefreshParameters()	
		ANFilterBankRun()	//Generate new AN instant. rates
		//DummyGraphs()
		sp.FlushSpks()		//Erase old spikes
		//Set all ANFs to New rates
		an.reset()
//		startf = startsw()-runtime
		// Perform multiple runs
		for j=0, reps-1{ 
//			runtime = startsw()
			run3() 
			sp.SaveSpks() 
//			mratimes.append(startsw()-runtime)
		}	
//		runtime = startsw()			
//		flushPlot()
//		mratimes.printf
		//Calculate mean 
		MeanRate()
		//for i=0,sp.cells.count-1 { 
			psth = Mspikes[0].histogram(0, 100,0.1)
			MRA[0].append(psth.sum(500,1000)/(reps*0.05))
		//}
		//Mspikes could be used to find PSTH, FSL etc info here
		runtime = startsw()-runtime
		print "MRA at ",tonefreq," ",psth.sum(500,1000)/(reps*0.05) ," took ",runtime, " secs "
//		print "Start time: ", startf, " Total : ",startf+mratimes.sum() +runtime
		objref psth 
	}
		runtime =startsw()-startf
	print runtime 

// Display rate level plots 
//	MRAgr = new Graph()
//	sprint(mrastr,"Masked Response Area: %s ",genestr)
//	MRAgr.label(0.25, 0.95, mrastr)
//	mrafreq.log10()
//	for j=0,sp.cells.count-1 {
	
//		MRA[j].plot(MRAgr,mrafreq, black, 1)
//	}
//	MRAgr.size(0,100,0,300)
//	MRAgr.exec_menu("View = plot")

//	sprint(mrastr, "%s%s.eps",genepath,genestr)
//	doNotify()
//	MRAgr.printfile(mrastr)
	//if (!using_gui){ objref MRAgr}
	AdditiveNoise = 0

}

proc MaskedStimuli(){local i,j,count,sum, channel, hi, lo
	objref  mrafreq

	mrafreq = new Vector()


	count=0
	
	AdditiveNoise = 1
	NoiseLevel = 50		//dbSPL max amplitude
	stimtype = 1
	tonefreq 	= cf.x[icentre]	//Hz
	dur 		= 0.095 	//duration of tone segment (seconds)
	spl 		= 70 		//dB SPL of tone 
	dutycycle 	= 0		//quiet duration = dutycycle*dur
	ramplngth 	= 0.005
	srate 		= 50000.0  
	stimtdres 	= 1/srate
	sg_rate 	= 10000		
	sg_tdres 	= 1/sg_rate
	nrep		= 1  		//nrep is number of reps in one stimulus
	stimdelay 	= 0.00		//sec
	


	for i = icentre-20, icentre+20 {
		tonefreq = cf.x[i]
		mrafreq.append(tonefreq)
		//New stimulus
		RefreshParameters()
		//Generate new AN instant. rates	
		ANFilterBankRun()
		DummyGraphs()
	
	}

}



















if (using_gui){
xpanel("MRA")
xbutton("Masked Response Area","MaskedResponseArea(reps)")
xbutton("Masked Response Area Stim Generator","MaskedStimuli()")
xbutton("Noise Rate ", "NoiseRate()")
xvalue("NR","NoiseRateTS")
xpanel()
}
