/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */


// cn.hoc
// Cochlear Nucleus network model: network specification file
// Michael Eager

//
objref cvode, random
cvode = new CVode(0)    // start with CVode inactive
random = new Random(seed)
random.MCellRan4(seed+1)
objref tstellate[nchannels][nTSperchannel], tuberculoventral[nchannels][nTVperchannel], \
dstellate[nchannels][nDSperchannel], golgi[nchannels][nGperchannel]


objref hsr2tsAMPAvec, lsr2tsAMPAvec,hsr2tvAMPAvec, lsr2tvAMPAvec, \
hsr2dsAMPAvec, lsr2dsAMPAvec, hsr2glgAMPAvec, lsr2glgAMPAvec, \
glg2dsGABAvec, glg2tsGABAvec, ds2tsGLYvec, ds2tvGLYvec, \
tv2tsGLYvec, ts2tsAMPAvec

hsr2tsAMPAvec = new Vector()
lsr2tsAMPAvec = new Vector()
hsr2tvAMPAvec = new Vector()
lsr2tvAMPAvec = new Vector()
hsr2dsAMPAvec = new Vector()
lsr2dsAMPAvec = new Vector()
hsr2glgAMPAvec = new Vector()
lsr2glgAMPAvec = new Vector()
glg2dsGABAvec = new Vector()
glg2tsGABAvec = new Vector()
ds2tsGLYvec = new Vector()
ds2tvGLYvec = new Vector()
tv2tsGLYvec = new Vector()
ts2tsAMPAvec = new Vector()


objref input[nchannels][nTSperchannel]
objref outfile,param,an
outfile = new File()
strdef filename, celltype

param = new NetworkParameters(6,4)
param.getnetparameters("defaultrecurrentparams.dat")
//
an = new AuditoryNerve()

//xopen("cngui.hoc")
// Create cells --------------------------------------------------------

proc create_cells() { local i,j,p
	netpar_mkpnm()
	quitmodel = 0
	if (pnm.myid == 0)  { print "Creating cells. This may take some time." }
	for i = 0, nchannels-1 {
		for j = 0, nTSperchannel-1 {
			sprint(celltype,"new CNcell(%d,%d,%d)",0,cf.x[i],i)
			tstellate[i][j] = netpar_create(celltype, tsgid, i, j)
		}
		for j = 0, nTVperchannel-1 {
			sprint(celltype,"new CNcell(%d,%d,%d)",2,cf.x[i],i)
			tuberculoventral[i][j] = netpar_create(celltype, tvgid, i, j)
		}
		for j = 0, nDSperchannel-1 {
			sprint(celltype,"new CNcell(%d,%d,%d)",1,cf.x[i],i)
			dstellate[i][j] = netpar_create(celltype, dsgid, i, j)
		}
		for j = 0, nGperchannel-1 {
			if ( LSR2GLG == 0 ) {//Golgi filterbank model
				sprint(celltype,"new Golgicell(%d,%d,%d,%f)",3,cf.x[i],i,param.bw.x[lsr][glg])
				golgi[i][j] = netpar_create(celltype, glggid, i, j)
			} else {
				sprint(celltype,"new CNcell(%d,%d,%d)",3,cf.x[i],i)
				golgi[i][j] = netpar_create(celltype, glggid, i, j)
				
			}
		}
		for j = 0, HSRsperchannel-1 {
			//sprint(celltype,"new SGC_fast(%d,%d,%d)",4,cf.x[i],i)
			an.HSR[i][j] = netpar_create("new SGC_fast(0.5)", hsrgid, i, j)
		}
		for j = 0, LSRsperchannel-1 {
			//sprint(celltype,"new ANF(%d,%d,%d)",5,cf.x[i],i)
			an.LSR[i][j] = netpar_create("new SGC_fast(0.5)", lsrgid, i, j)
		}
		
		p = 100*(i)/(nchannels)
		if (pnm.myid == 0) printf("\r=== %3d\% ===",p)
		flushf()
		doNotify() // Although this slows down cell creation, the
        // process is so long that we have to allow the
        // user to quit during the creation.
		
		
	}
	if (pnm.myid == 0)  printf("\n")
	//  access mit[0][0].soma // because not on every machine
}

// Connect cells, set synaptic parameters ------------------------------

func wrap() {
	if ($1 < 0) {
		return $2+$1
	} else {
		if ($1 < $2) {
			return $1
		} else {
			return $1-$2
		}
	}
}


// When refering to "channel" in the following code
// I mean Auditory isofrequency laminae

proc connect_cells() {local i,target,source,low,high,range,channel,sourcechannel
	
	if (pnm.myid == 0) {
		print "Connecting cells"
		sprint(filename,"%s.connect",$s1)
		outfile.wopen(filename)
	}
	hsr2tsAMPAvec.resize(0)
	lsr2tsAMPAvec.resize(0)
	hsr2tvAMPAvec.resize(0)
	lsr2tvAMPAvec.resize(0)
	hsr2dsAMPAvec.resize(0)
	lsr2dsAMPAvec.resize(0)
	hsr2glgAMPAvec.resize(0)
	lsr2glgAMPAvec.resize(0)
	glg2dsGABAvec.resize(0)
	glg2tsGABAvec.resize(0)
	ds2tsGLYvec.resize(0)
	ds2tvGLYvec.resize(0)
	tv2tsGLYvec.resize(0)
	ts2tsAMPAvec.resize(0)
	
	if (pnm.myid == 0) print "HSR->TS"
	if( ( param.n.getval(hsr,ts) > 0 ) && ( nTSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",hsr,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(hsr,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(hsr,ts)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,HSRsperchannel-1)
					//if (pnm.myid == 0)  print "HSR[",sourcechannel,"][",source,"] connected to TS[",channel,"][",target,"]"
					hsr2tsAMPAvec.append( \
					 netpar_connect(hsrgid,sourcechannel,source,tsgid,channel,target,\
					 0,param.delay.getval(hsr,ts), param.w.getval(hsr,ts))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "LSR->TS"
	if( ( param.n.getval(lsr,ts) > 0 ) && ( nTSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",lsr,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(lsr,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(lsr,ts)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,LSRsperchannel-1)
					// print "LSR[",sourcechannel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					lsr2tsAMPAvec.append( \
					netpar_connect(lsrgid,sourcechannel,source,tsgid,channel,target,\
					0,param.delay.getval(lsr,ts), param.w.getval(lsr,ts))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "HSR->TV"
	if( ( param.n.getval(hsr,tv) > 0 ) && ( nTVperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",hsr,tv)
		for channel = 0, nchannels-1{
			for target = 0, nTVperchannel-1 {
				for i=0, param.n.getval(hsr,tv)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(hsr,tv)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,HSRsperchannel-1)
					//if (pnm.myid == 0)  print "HSR[",sourcechannel,"][",source,"] connected to TV[",channel,"][",target,"]"
					hsr2tvAMPAvec.append( \
	  				netpar_connect(hsrgid,sourcechannel,source,tvgid,channel,target,\
					0,param.delay.getval(hsr,tv), param.w.getval(hsr,tv))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "LSR->TV"
	if( ( param.n.getval(lsr,tv) > 0 ) && ( nTVperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",lsr,tv)
		for channel = 0, nchannels-1{
			for target = 0, nTVperchannel-1 {
				for i=0, param.n.getval(lsr,tv)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(lsr,tv)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,LSRsperchannel-1)
					// print "LSR[",sourcechannel,"][",source,"] connected to "TV[",channel,"][",target,"]"
					lsr2tvAMPAvec.append( \
					netpar_connect(lsrgid,sourcechannel,source,tvgid,channel,target,\
					0,param.delay.getval(lsr,tv), param.w.getval(lsr,tv))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "HSR->DS"
	if( ( param.n.getval(hsr,ds) > 0 ) && ( nDSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",hsr,ds)
		for channel = 0, nchannels-1{
			for target = 0, nDSperchannel-1 {
				for i=0, param.n.getval(hsr,ds)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(hsr,ds)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} 
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,HSRsperchannel-1)
					// print "HSR[",sourcechannel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					hsr2dsAMPAvec.append( \
					netpar_connect(hsrgid,sourcechannel,source,dsgid,channel,target,\
					0,param.delay.getval(hsr,ds), param.w.getval(hsr,ds))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "LSR->DS"
	if( ( param.n.getval(lsr,ds) > 0 ) && ( nDSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",lsr,ds)
		for channel = 0, nchannels-1{
			for target = 0, nDSperchannel-1 {
				for i=0, param.n.getval(lsr,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(lsr,ds)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
						} else { sourcechannel = int(sourcechannel) }
						if (sourcechannel <=0 ) sourcechannel=0
						if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
						//Choose random source from available cells
						source = random.discunif(0,LSRsperchannel-1)
						// print "LSR[",sourcechannel,"][",source,"] connected to "DS[",channel,"][",target,"]"
						lsr2dsAMPAvec.append( \
						netpar_connect(lsrgid,sourcechannel,source,dsgid,channel,target,\
						0,param.delay.getval(lsr,ds), param.w.getval(lsr,ds))) //syn id=0 AMPA, =1 GLY =2 GABAa
						if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
						
					}
				}
			}
		}
		if (LSR2GLG == 1){
			if (pnm.myid == 0) print "LSR->GLG"
			if( ( param.n.getval(lsr,glg) > 0 ) && ( nGperchannel != 0 ) ){
				if (pnm.myid == 0) outfile.printf("\n%d %d\n",lsr,glg)
				for channel = 0, nchannels-1{
					for target = 0, nGperchannel-1 {
						for i=0, param.n.getval(lsr,glg)-1{
							//Choose source channel
							sourcechannel = random.normal(channel,param.bw.getval(lsr,glg)/2)
							if ((sourcechannel - int(sourcechannel)) > 0.5 ){
								sourcechannel = 1+int(sourcechannel)
								} else { sourcechannel = int(sourcechannel) }
								if (sourcechannel <=0 ) sourcechannel=0
								if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
								//Choose random source from available cells
								source = random.discunif(0,LSRsperchannel-1)
								// print "LSR[",sourcechannel,"][",source,"] connected to "GLG[",channel,"][",target,"]"
								lsr2glgAMPAvec.append( \
								netpar_connect(lsrgid,sourcechannel,source,glggid,channel,target,\
								0,param.delay.getval(lsr,glg), param.w.getval(lsr,glg))) //syn id=0 AMPA, =1 GLY =2 GABAa
								if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
								
							}
						}
					}
				}
			}//LSR2GLG
}//connect_cells

proc connect_CNcells(){local i,target,source,low,high,range,channel,sourcechannel
	if (pnm.myid == 0) print "TS->TS"
	if( ( param.n.getval(ts,ts) > 0 ) && ( nTSperchannel > 1 ) ){
		if (pnm.myid == 0) outfile.printf("%d %d\n",ts,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(ts,ts)-1{
					//Choose random source from available cells
					source = random.discunif(0,nTSperchannel-1)
					while( source == target)  source = random.repick()  //Don't connect to self
					// print "TS[",channel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					// tscells[channel*numTSperchannel+target].connect_pre(tscells[source], 1, param.delay.getval(ts,ts), param.w.getval(ts,ts))
					ts2tsAMPAvec.append( \
					netpar_connect(tsgid,channel,source,tsgid,channel,target,\
					0,param.delay.getval(ts,ts), param.w.getval(ts,ts))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",channel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "TV->TS"
	if( ( param.n.getval(tv,ts) > 0 ) && ( nTSperchannel != 0 ) && ( nTVperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",tv,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(tv,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(tv,ts)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} \
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,nTVperchannel-1)
					// print "TV[",sourcechannel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					tv2tsGLYvec.append( \
					netpar_connect(tvgid,sourcechannel,source,tsgid,channel,target,\
					1,param.delay.getval(tv,ts), param.w.getval(tv,ts))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
					
				}
			}
		}
	}
	if (pnm.myid == 0) print "DS->TS"
	if( ( param.n.getval(ds,ts) > 0 ) && ( nTSperchannel != 0 ) && ( nDSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",ds,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(ds,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(ds,ts)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} \
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,nDSperchannel-1)
					// print "DS[",sourcechannel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					ds2tsGLYvec.append( \
					netpar_connect(dsgid,sourcechannel,source,tsgid,channel,target,\
					1,param.delay.getval(ds,ts), param.w.getval(ds,ts))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
				}
			}
		}
	}
	if (pnm.myid == 0) print "DS->TV"
	if( ( param.n.getval(ds,tv) > 0 ) && ( nTVperchannel != 0 ) && ( nDSperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",ds,tv)
		for channel = 0, nchannels-1{
			for target = 0, nTVperchannel-1 {
				for i=0, param.n.getval(ds,tv)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(ds,tv)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} \
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,nDSperchannel-1)
					// print "DS[",sourcechannel,"][",source,"] connected to "TV[",channel,"][",target,"]"
					ds2tvGLYvec.append( \
					netpar_connect(dsgid,sourcechannel,source,tvgid,channel,target,\
					1,param.delay.getval(ds,tv), param.w.getval(ds,tv))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
				}
			}
		}
	}
	if (pnm.myid == 0) print "GLG->DS"
	if( ( param.n.getval(glg,ds) > 0 ) && ( nDSperchannel != 0 ) && ( nGperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",glg,ds)
		for channel = 0, nchannels-1{
			for target = 0, nDSperchannel-1 {
				for i=0, param.n.getval(glg,ds)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(glg,ds)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} \
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					//Choose random source from available cells
					source = random.discunif(0,nGperchannel-1)
					// print "GLG[",sourcechannel,"][",source,"] connected to "DS[",channel,"][",target,"]"
					glg2dsGABAvec.append( \
					netpar_connect(glggid,sourcechannel,source,dsgid,channel,target,\
					2,param.delay.getval(glg,ds), param.w.getval(glg,ds))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
				}
			}
		}
	}
	
	if (pnm.myid == 0) print "GLG->TS"
	if( ( param.n.getval(glg,ts) > 0 ) && ( nTSperchannel != 0 ) && ( nGperchannel != 0 ) ){
		if (pnm.myid == 0) outfile.printf("\n%d %d\n",glg,ts)
		for channel = 0, nchannels-1{
			for target = 0, nTSperchannel-1 {
				for i=0, param.n.getval(glg,ts)-1{
					//Choose source channel
					sourcechannel = random.normal(channel,param.bw.getval(glg,ts)/2)
					if ((sourcechannel - int(sourcechannel)) > 0.5 ){
						sourcechannel = 1+int(sourcechannel)
					} \
					else { sourcechannel = int(sourcechannel) }
					if (sourcechannel <=0 ) sourcechannel=0
					if (sourcechannel > nchannels-1 ) sourcechannel=nchannels-1
					
					//Choose random source from available cells
					source = random.discunif(0,nGperchannel-1)
					// print "GLG[",sourcechannel,"][",source,"] connected to "TS[",channel,"][",target,"]"
					glg2tsGABAvec.append( \
					netpar_connect(glggid,sourcechannel,source,tsgid,channel,target,\
					2,param.delay.getval(glg,ds), param.w.getval(glg,ds))) //syn id=0 AMPA, =1 GLY =2 GABAa
					if (pnm.myid == 0)  outfile.printf("%d %d %d %d\n",sourcechannel,source,channel,target)
				}
			}
		}
	}
	if (pnm.myid == 0)  outfile.close()
}//end connect_cells()



/*
proc set_AMPA_weights() { local i // 1 arg - weight
	for i = 0,m2gAMPAvec.size()-1 {
		//    m2gAMPAlist.object(i).weight = $1
		netpar_weight(m2gAMPAvec, i, $1)
	}
}

proc set_NMDA_weights() { local i // 1 arg - weight
	for i = 0,m2gNMDAvec.size()-1 {
		//    m2gNMDAlist.object(i).weight = $1
		netpar_weight(m2gNMDAvec, i, $1)
	}
}

proc randomise_NMDA() { local i // 2 args - mean weight, variance
	//  m2gNMDAlist.object(0).weight = random.normal($1,$2)
	netpar_weight(m2gNMDAvec, 0, random.normal($1,$2))
	//m2gNMDAlist.object(0).weight = random.poisson($1)
	for i = 1,m2gNMDAvec.size()-1 {
		//    m2gNMDAlist.object(i).weight = random.repick()
		netpar_weight(m2gNMDAvec, i, random.repick())
	}
}

proc set_NMDA_time_constants() { local i,j, alpha, beta
	// 2 args - rise time constant (ms),
	//     decay time constant (ms)
	if ($1 < 1e-9) { $1 = 1e-9 }
	if ($2 < 1e-9) { $2 = 1e-9 }
	beta = 1/$2
	alpha = 1/$1 - beta
	
	
	for i = 0, ngranx-1 {
		for j = 0, ngrany-1 {
			if (pnm.gid_exists(tvgid.x[i][j])) {
				gran[i][j].NMDAr.Alpha = alpha
				gran[i][j].NMDAr.Beta = beta
			}
		}
	}
}

proc set_GABAA_time_constant() { local i,j, tau, gid
	// 1 args - decay time constant (ms)
	if ($1 < 1e-9) { $1 = 1e-9 }
	tau = $1
	
	for i = 0, nchannels-1 {
		for j = 0, nTSperchannels-1 {
			if (pnm.gid_exists(tsgid.x[i][j])) {
				mit[i][j].GABAA.tau = tau
			}
		}
	}
}
*/
												
// Add input currents -------------------------------------------

proc insert_iclamps() { local i,j, ran // 2 args - del dur
	// if $1 is negative, delay is randomly chosen in the uniform interval 0,$1
	for i = 0, nchannels-1 {
		for j = 0, nTSperchannel-1 {
			if (pnm.gid_exists(tsgid.x[i][j])) {
				tstellate[i][j].soma input[i][j] = new IClamp(0.5)
				input[i][j].dur = $2
				input[i][j].del = abs($1)
			}
		}
	}
	random.uniform(0,abs($1))
	if ($1 < 0) {
		for i = 0, nchannels-1 {
			for j = 0, nTSperchannel-1 {
				ran = random.repick()
				if (pnm.gid_exists(tsgid.x[i][j])) {
					input[i][j].del = ran
				}
			}
		}
	}
}

// Randomise initial conditions ----------------------------------------

proc random_init() { local i,j, ran
	random.normal(-65,50)
	for i = 0,nchannels-1 {
		for j = 0, nTSperchannel-1 {
			ran = random.repick()
			if (pnm.gid_exists(tsgid.x[i][j])) {
				tstellate[i][j].soma.v(0.5) = ran
			}
		}
		for j = 0, nDSperchannel-1 {
			ran = random.repick()
			if (pnm.gid_exists(dsgid.x[i][j])) {
				dstellate[i][j].soma.v(0.5) = ran
			}
		}
		for j = 0, nTVperchannel-1 {
			ran = random.repick()
			if (pnm.gid_exists(tvgid.x[i][j])) {
				tuberculoventral[i][j].soma.v(0.5) = ran
			}
		}
		/*    for j = 0, nGperchannel-1 {
			ran = random.repick()
			if (pnm.gid_exists(glggid.x[i][j])) {
				golgi[i][j].soma.v(0.5) = ran
			}
		}*/
	}
}

proc SaveSpikes(){local i,j
	for i=0,nchannels-1{
		for j=0,nTSperchannel-1{
			if (pnm.gid_exists(tsgid,i,j)){
				tstellate[i][j].spikes.append(tstellate[i][j].spiketimes)
			}
		}
		for j=0,nTVperchannel-1{
			if (pnm.gid_exists(tvgid.x[i][j])){
				tuberculoventral[i][j].spikes.append(tuberculoventral[i][j].spiketimes)
			}
		}
		for j=0,nDSperchannel-1{
			if (pnm.gid_exists(dsgid.x[i][j])){
				dstellate[i][j].spikes.append(dstellate[i][j].spiketimes)
			}
		}
		for j=0,nGperchannel-1{
			if (pnm.gid_exists(glggid.x[i][j])){
				golgi[i][j].spikes.append(golgi[i][j].spiketimes)
			}
		}
		for j=0,HSRsperchannel-1{
			if (pnm.gid_exists(hsrgid.x[i][j])){
				an.HSRspikes[i][j].append(an.HSRspiketimes[i][j])
			}
		}
		for j=0,LSRsperchannel-1{
			if (pnm.gid_exists(lsrgid.x[i][j])){
				an.LSRspikes[i][j].append(an.LSRspiketimes[i][j])
			}
		}
	}
}

proc ClearSpikes(){local i,j
	for i=0,nchannels-1{
		for j=0,nTSperchannel-1{
			if (pnm.gid_exists(tsgid,i,j)){
				tstellate[i][j].spikes.resize(0)
			}
		}
		for j=0,nTVperchannel-1{
			if (pnm.gid_exists(tvgid.x[i][j])){
				tuberculoventral[i][j].spikes.resize(0)
			}
		}
		for j=0,nDSperchannel-1{
			if (pnm.gid_exists(dsgid.x[i][j])){
				dstellate[i][j].spikes.resize(0)
			}
		}
		for j=0,nGperchannel-1{
			if (pnm.gid_exists(glggid.x[i][j])){
				golgi[i][j].spikes.resize(0)
			}
		}
		for j=0,HSRsperchannel-1{
			if (pnm.gid_exists(hsrgid.x[i][j])){
				an.HSRspikes[i][j].resize(0)
			}
		}
		for j=0,LSRsperchannel-1{
			if (pnm.gid_exists(lsrgid.x[i][j])){
				an.LSRspikes[i][j].resize(0)
			}
		}
	}
}

//  Create the model

create_cells()
connect_cells(fileroot)
connect_CNcells()
