/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
*   TV_RateLevel.hoc for the Unit in Fig 8A of Spirou et al 1999
*
*/

load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")

xopen("Params.hoc")           // default parameters
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template

//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc") 
xopen("pvec_DS_RateLevel.hoc")

xopen("parameters_TV_RateLevel_Fig8A.hoc")     //This model's parameters
xopen("CochlearNucleus.hoc")         // model set-up
xopen("spike_stats.hoc")  // PSTHcell and meanrate procedures


//--- Setup Auditory and CN Stellate model
create_cells()
connect_cells(fileroot)
connect_CNcells(fileroot)
//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc")
xopen("pvec_DS_RateLevel.hoc")


//Setup this experiment
xopen("par_experiment_TV_RateLevel_Fig8A.hoc")
xopen("cngui.hoc")


param.tv_erev=-65
param.offset=0
param.n.x[ds][tv] = 30
param.bw.x[ds][tv] = 30
create_connect_TV(fileroot)

//overload SaveSpikes from CochlearNucleus.hoc
proc SaveSpikes(){local i,j 
	an.SaveSpikes()
	i=0	
	for j=0,1{
		sprint(cmd, "tuberculoventral[%d][%d].SaveSpikes()",i,j)
		execute1(cmd)
	}
	for i=0,nchannels-1 {
        sprint(cmd, "dstellate[%d][0].SaveSpikes()",i)
	    execute1(cmd)
	}
	for i=0,nchannels-1 {
        sprint(cmd, "golgi[%d][0].SaveSpikes()",i)
	    execute1(cmd)
	}
	
}

//overload ClearSpikes from CochlearNucleus.hoc
proc ClearSpikes(){local ii,jj
    ClearInputSpikes()
       for jj=0,1{
			sprint(cmd, "tuberculoventral[0][%d].spikes.resize(0)",jj)
            execute1(cmd)
        }
 	
	for ii=0,nchannels-1{
        for jj=0,nDSperchannel-1{
			sprint(cmd, "dstellate[%d][%d].spikes.resize(0)",ii,jj)
            execute1(cmd)
        }
        for jj=0,nGperchannel-1{
			sprint(cmd, "golgi[%d][%d].spikes.resize(0)",ii,jj)
            execute1(cmd)
        }
    }
 print "Cleared CN cell Spikes"
}


proc TV_BFtone_Setup(){
	stimtype	= 1     // Pure Tone
	dur		    = 0.049  // duration of stim (seconds)
	tonefreq    = cf.x[whichcell] //Hz, unit 1 CF
	GetAudiogramData()
	RefreshParameters()
	ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()
}

proc TV_Noise_Setup(){
	stimtype			= 6     //BBN 
	dur				    = 0.049  // duration of stim (seconds)
	tstop				= 70    // ms
	spl				    = 20     //dB SPL
	GetAudiogramData()
	RefreshParameters()
	ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()
}







proc multi_run(){local irep,xtime
    xtime = startsw()
    ClearSpikes()
    for irep=0,reps-1{
		GenInputSpikes()
		print irep
		//run()
		stdinit()
		continuerun(tstop)
        SaveSpikes()
    }
    print "Multi_run time:", startsw() - xtime
}


// Sound level in dB attenuation refers to noise spectrum level at 0 dB equal to \~40 dB re 20 $\mu$Pa/Hz$^{1/2}$.


//////////Default Parameters for TV_RateLevel///////////////

ANsoundspath			= "../../sounds"
cfhi				= 40000
cflo				= 200
RefreshCF()
ramplngth			= 0.002
stimdelay			= 0.02   //sec, 20 msec
dutycycle                       = 0.2 //, usually 0.2
reps				= 25     //
ANmodel				= 6      // Zilany Bruce model version 3
species				= 1      // Cat
ANFBgr					= new Graph()
usesavedfilterbanks		= 1
srate					= 500000
stimtdres				= 1/srate
sg_rate					= 50000
sg_tdres				= 1/sg_rate
RefreshCF()
GetAudiogramData()
RefreshParameters()
//  ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()


proc TV_2tone(){
	stimtype			= 9     //TwoTone
	dur				    = 0.049  // duration of stim (seconds)
	tstop				= 70    // ms
	spl				    = 20     //dB SPL
	tonefreq            = 6600 //Hz, unit 1 CF
	tone2freq           = 9350 //Hz ,unit 2 
	tone2spl            = spl // set the second tone's sound level to the same as the first
	GetAudiogramData()
	RefreshParameters()
	ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()
}

proc TV_BFtone(){
	stimtype	= 1     // Pure Tone
	dur		= 0.049  // duration of stim (seconds)
	tstop		= 70    // ms
	spl		= 20     //dB SPL
	tonefreq        = cf.x[whichcell] //Hz, unit 1 CF
	GetAudiogramData()
	RefreshParameters()
	ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()
}

proc TV_Noise(){
	stimtype			= 6     //BBN 
	dur				    = 0.049  // duration of stim (seconds)
	tstop				= 70    // ms
	spl				    = 20     //dB SPL
	tonefreq            = cf.x[whichcell] //Hz, unit 1 CF
	GetAudiogramData()
	RefreshParameters()
	ANFilterBankRun()
//  CheckFilterbank()
//  SetInputRates()
}




//xopen("TV_Notch.ses")

objref fitgr,gg
//TV Optimisation
objref gr,target_ratelevel, dslist, fvec,dvec,ivec,weighting,errorvec
objref anrate[nchannels],rate_level_graph
gr = new Graph()


//
// Fitness/error function
//
proc plot_fitgr(){
    objref fitgr
    fitgr = new Graph()
//    expected_notch[1].plot(fitgr,freq1_notch,4,1)
//    CNrate[tv].plot(fitgr,cf,3,1)
//    type2_1oct_sweep[1].plot(fitgr,freq_1oct,5,1)
//    fitgr.exec_menu("View = plot")
}

objref templevel,indlevel,errorvec,refvec

reps=20
strdef origfileroot
origfileroot = fileroot

error=0
strdef datestr,grlbl
objref ivec //,pval[NPARAMS]
ivec= new Vector()
ivec.append(3,9,7,5,1,2,8,6,4,0,10,11,12,13)





proc RedefineTVmodel(){local i_chan,j_cell,ii

	create_connect_TV(origfileroot)
	for ii=0,1 {
        tuberculoventral[0][ii].soma.erev_rm = param.tv_erev
        tuberculoventral[0][ii].soma.gleak_rm = param.tv_gleak
}
	for i = 0, ds2tvGLYlist.count-1 if(ds2tvGLYlist.object(i).postcell() == tuberculoventral[0][1]) print ds2tvGLYlist.object(i).weight=0

}


level_offset=0

objref tvpstlist, grate[nchannels],dsrate[nchannels],tvrate[nchannels],hsrrate[nchannels],lsrrate[nchannels],rate_level_graph, tvstdev[nchannels],level,fvec
proc Ratelevel(){local ispl,i,j,count,sum,runtime,cell,xtime localobj tmp	
	count = 0
	tvpstlist = new List()
	for i=0,99 {
		tvrate[i] = new Vector()
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		tvstdev[i] = new Vector()
		grate[i] = new Vector()
	}
	fvec = new Vector()
	//RefreshParameters()
	//ANFilterBankRun()
	for ispl=0,level.size-1 {
		spl = level.x[ispl] - level_offset
		runtime = startsw()
		ClearSpikes()
        for j=0,1 tuberculoventral[0][j].spikes = new Vector()
		RefreshParameters()
		ANFilterBankRun()
		SetInputRates()
		multi_run()
		
for j=0,1 {
	//	sum=0
	meanrate(tuberculoventral[0][j].spikes)
	tvrate[j].append(tuberculoventral[0][j].spikes.size / (reps *0.05))
	tvstdev[j].append(isistdev)
}

ANSpikes()
for j=0,nchannels-1 {
	meanrate(dstellate[j][0].spikes)
	meanrate(golgi[j][0].spikes)
	grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
	dsrate[j].append(dstellate[j][0].spikes.size / (reps * 0.05))
	for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
	for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
	meanrate(an.HSRspikes[j][0])
	meanrate(an.LSRspikes[j][0])

	hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
	lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
}

		
		count+=1
		runtime = startsw()-runtime
		print "Simulation took ",runtime, " secs "
	}
	
	rate_level_graph = new Graph()
//	fvec.plot(rate_level_graph,2,2)
	tvrate[0].plot(rate_level_graph,level ,1,1)
	tvrate[1].plot(rate_level_graph,level ,2,1)
	grate[whichcell].plot(rate_level_graph,level,5,1)	
	dsrate[whichcell].plot(rate_level_graph,level,3,1)	
	hsrrate[whichcell].plot(rate_level_graph,level,4,1)
	lsrrate[whichcell].plot(rate_level_graph,level,5,1)
	rate_level_graph.exec_menu("View = plot")
	
}//Ratelevel


/*
TV_BFtone()
level=new Vector(20)
level.indgen().mul(3).add(20) //20:3:60
Ratelevel()
TV_Noise()
level=new Vector(20)
level.indgen().mul(2).add(50)
Ratelevel()
*/




//QuickRun()
//spl=50
//sprint(fileroot,"%s_spl50",origfileroot)
//param.w.x[hsr][tv]=-0.0002
//param.w.x[lsr][tv]*=2
objref origpvec
//set_pvec()
//origpvec = pvec.c



//TV_BFtone()
//level=new Vector(20)
//level.indgen().mul(3).add(20) //20:3:60
//Ratelevel()
//TV_Noise()
//level=new Vector(20)
//level.indgen().mul(2).add(50) //50:2:88
//Ratelevel()

// Target RL data
objref target_rate_level[4],fitgr, toneRL[8], noiseRL[8]
fitgr = new Graph()


//xopen("TV_RateLevel/pvec_TV_RateLevel.hoc")

 set_pvec()
 ANsoundspath="../sounds"

NPARAMS=4
init_params(NPARAMS)
append_weight_lsrtv()
append_weight_glgtv()
append_weight_hsrtv()
append_weight_dstv()

//append_tv_gleak()
//append_tv_erev()
//append_tv_ghbar()

param.w.x[lsr][tv] = 0.0041716
param.w.x[hsr][tv] = 0.000645083
param.w.x[ds][tv] = 0.00358648
param.w.x[glg][tv] = 0.00158648
param.n.x[lsr][tv] = 20
param.n.x[hsr][tv] = 10
param.n.x[ds][tv] = 30
param.n.x[glg][tv] = 10
param.bw.x[ds][tv] = 30
param.bw.x[glg][tv] = 20
param.tv_erev =  -70.2485 
param.tv_gleak = 0.000249321



proc run_multipleprax(){
set_pvec()
reps=5
runprax2()
runprax()
//reps=10
//runprax()
reps=50
printprax2()
}


proc Rerun_ANmodel_tone(){
	TV_BFtone()
		create_cells()
	for i=0,99 {
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		grate[i] = new Vector()
	}	
	for (spl=20;spl<=100;spl+=10){
    RefreshParameters()
    ANFilterBankRun()
    //SaveANFilterBank2File()
    //for i=0,nchannels-1 golgi[i][0].SetRate2()
    //SaveGolgiFilterBank2File()
    SetInputRates()	

    ClearSpikes()
    for irep=0,reps-1{
		GenInputSpikes()
        SaveSpikes()
    }	
	ANSpikes()
	for j=0,nchannels-1 {
			meanrate(golgi[j][0].spikes)
			grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
			for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
			for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
			meanrate(an.HSRspikes[j][0])
			meanrate(an.LSRspikes[j][0])
			hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
			lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
		}
	} 
    fitgr.erase_all()
    hsrrate[whichcell].plot(fitgr,20,1,1)
    lsrrate[whichcell].plot(fitgr,20,2,1)
    grate[whichcell].plot(fitgr,20,3,1)
}

proc Rerun_ANmodel_noise(){

	TV_Noise()
	create_cells()
	for i=0,99 {
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		grate[i] = new Vector()
	}	
	for (spl=40;spl<=100;spl+=10){
    RefreshParameters()
    ANFilterBankRun()
    //SaveANFilterBank2File()
    //for i=0,nchannels-1 golgi[i][0].SetRate2()
    //SaveGolgiFilterBank2File()
    SetInputRates()	
    ClearSpikes()
    for irep=0,reps-1{
		GenInputSpikes()
        SaveSpikes()
    }	
	ANSpikes()
	for j=0,nchannels-1 {
			meanrate(golgi[j][0].spikes)
			grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
			for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
			for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
			meanrate(an.HSRspikes[j][0])
			meanrate(an.LSRspikes[j][0])
			hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
			lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
		}
	} 
    fitgr.erase_all()
    hsrrate[whichcell].plot(fitgr,10,1,1)
    lsrrate[whichcell].plot(fitgr,10,2,1)
    grate[whichcell].plot(fitgr,10,3,1)
}

objref myg,myn
proc PlotRLs(){
	myg = new Graph()
	myn = new Graph()
	for i=3,6 toneRL[i].plot(myg,toneRL[0])
	for i=1,2 toneRL[i].plot(myg,toneRL[0],2,2)
	for i=0,1 target_rate_level[i].plot(myg,toneRL[0],3,3)
	for i=3,6 noiseRL[i].plot(myn,noiseRL[0])
	for i=1,2 noiseRL[i].plot(myn,noiseRL[0],2,2)
	for i=2,3 target_rate_level[i].plot(myn,noiseRL[0],3,3)
	myg.exec_menu("View = plot")
	myn.exec_menu("View = plot")
}

xopen("TV_RateLevel.ses")
