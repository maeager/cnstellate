/* -*- mode: nrnhoc; tab-width: 4; indent-tabs-mode: t -*- */

/*
*   TV_RateLevel.hoc for the Unit in Fig 8A of Spirou et al 1999
*
*/

load_file("nrngui.hoc")
//load_file("par_netpar.hoc")
//load_file("par_init.hoc")

xopen("Params.hoc")           // default parameters
xopen("Utilities.hoc")
xopen("NetworkParameters.hoc")
xopen("AuditoryNerve.hoc")
xopen("par_CNcell.tem")      // CN cell template

//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc") 
xopen("pvec_DS_RateLevel.hoc")

xopen("parameters_TV_RateLevel_Fig8A.hoc")     //This model's parameters
xopen("CochlearNucleus.hoc")         // model set-up
xopen("spike_stats.hoc")  // PSTHcell and meanrate procedures


//--- Setup Auditory and CN Stellate model
create_cells()
connect_cells(fileroot)
connect_CNcells(fileroot)

//Previous optimisation parameters
xopen("pvec_Golgi_RateLevel.hoc")
xopen("pvec_DS_ClickRecovery.hoc")
xopen("pvec_DS_RateLevel.hoc")


//Setup this experiment
xopen("par_experiment_TV_RateLevel_Fig8A.hoc")
xopen("cngui.hoc")


param.tv_erev=-65
param.offset=0
param.n.x[ds][tv] = 30
param.bw.x[ds][tv] = 30




//xopen("TV_Notch.ses")


level_offset=0

objref tvpstlist, grate[nchannels],dsrate[nchannels],tvrate[nchannels],hsrrate[nchannels],lsrrate[nchannels],rate_level_graph, tvstdev[nchannels],level,fvec
proc Ratelevel(){local ispl,i,j,count,sum,runtime,cell,xtime localobj tmp	
	count = 0
	tvpstlist = new List()
	for i=0,99 {
		tvrate[i] = new Vector()
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		tvstdev[i] = new Vector()
		grate[i] = new Vector()
	}
	fvec = new Vector()
	//RefreshParameters()
	//ANFilterBankRun()
	for ispl=0,level.size-1 {
		spl = level.x[ispl] - level_offset
		runtime = startsw()
		ClearSpikes()
        for j=0,1 tuberculoventral[0][j].spikes = new Vector()
		RefreshParameters()
		ANFilterBankRun()
		SetInputRates()
		multi_run()
		
for j=0,1 {
	//	sum=0
	meanrate(tuberculoventral[0][j].spikes)
	tvrate[j].append(tuberculoventral[0][j].spikes.size / (reps *0.05))
	tvstdev[j].append(isistdev)
}

ANSpikes()
for j=0,nchannels-1 {
	meanrate(dstellate[j][0].spikes)
	meanrate(golgi[j][0].spikes)
	grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
	dsrate[j].append(dstellate[j][0].spikes.size / (reps * 0.05))
	for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
	for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
	meanrate(an.HSRspikes[j][0])
	meanrate(an.LSRspikes[j][0])

	hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
	lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
}

		
		count+=1
		runtime = startsw()-runtime
		print "Simulation took ",runtime, " secs "
	}
	
	rate_level_graph = new Graph()
//	fvec.plot(rate_level_graph,2,2)
	tvrate[0].plot(rate_level_graph,level ,1,1)
	tvrate[1].plot(rate_level_graph,level ,2,1)
	grate[whichcell].plot(rate_level_graph,level,5,1)	
	dsrate[whichcell].plot(rate_level_graph,level,3,1)	
	hsrrate[whichcell].plot(rate_level_graph,level,4,1)
	lsrrate[whichcell].plot(rate_level_graph,level,5,1)
	rate_level_graph.exec_menu("View = plot")
	
}//Ratelevel


/*
TV_BFtone()
level=new Vector(20)
level.indgen().mul(3).add(20) //20:3:60
Ratelevel()
TV_Noise()
level=new Vector(20)
level.indgen().mul(2).add(50)
Ratelevel()
*/




//QuickRun()
//spl=50
//sprint(fileroot,"%s_spl50",origfileroot)
//param.w.x[hsr][tv]=-0.0002
//param.w.x[lsr][tv]*=2
objref origpvec
//set_pvec()
//origpvec = pvec.c



//TV_BFtone()
//level=new Vector(20)
//level.indgen().mul(3).add(20) //20:3:60
//Ratelevel()
//TV_Noise()
//level=new Vector(20)
//level.indgen().mul(2).add(50) //50:2:88
//Ratelevel()

// Target RL data
objref target_rate_level[4],fitgr, toneRL[8], noiseRL[8]
fitgr = new Graph()


//xopen("TV_RateLevel/pvec_TV_RateLevel.hoc")

 set_pvec()
 ANsoundspath="../sounds"

NPARAMS=4
init_params(NPARAMS)
append_weight_lsrtv()
append_weight_glgtv()
append_weight_hsrtv()
append_weight_dstv()

//append_tv_gleak()
//append_tv_erev()
//append_tv_ghbar()

param.w.x[lsr][tv] = 0.0041716
param.w.x[hsr][tv] = 0.000645083
param.w.x[ds][tv] = 0.00358648
param.w.x[glg][tv] = 0.00158648
param.n.x[lsr][tv] = 20
param.n.x[hsr][tv] = 10
param.n.x[ds][tv] = 30
param.n.x[glg][tv] = 10
param.bw.x[ds][tv] = 30
param.bw.x[glg][tv] = 20
param.tv_erev =  -70.2485 
param.tv_gleak = 0.000249321



proc run_multipleprax(){
set_pvec()
reps=5
runprax2()
runprax()
//reps=10
//runprax()
reps=50
printprax2()
}


proc Rerun_ANmodel_tone(){
	TV_BFtone()
		create_cells()
	for i=0,99 {
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		grate[i] = new Vector()
	}	
	for (spl=20;spl<=100;spl+=10){
    RefreshParameters()
    ANFilterBankRun()
    //SaveANFilterBank2File()
    //for i=0,nchannels-1 golgi[i][0].SetRate2()
    //SaveGolgiFilterBank2File()
    SetInputRates()	

    ClearSpikes()
    for irep=0,reps-1{
		GenInputSpikes()
        SaveSpikes()
    }	
	ANSpikes()
	for j=0,nchannels-1 {
			meanrate(golgi[j][0].spikes)
			grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
			for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
			for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
			meanrate(an.HSRspikes[j][0])
			meanrate(an.LSRspikes[j][0])
			hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
			lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
		}
	} 
    fitgr.erase_all()
    hsrrate[whichcell].plot(fitgr,20,1,1)
    lsrrate[whichcell].plot(fitgr,20,2,1)
    grate[whichcell].plot(fitgr,20,3,1)
}

proc Rerun_ANmodel_noise(){

	TV_Noise()
	create_cells()
	for i=0,99 {
		dsrate[i] = new Vector()
		lsrrate[i] = new Vector()
		hsrrate[i] = new Vector()
		grate[i] = new Vector()
	}	
	for (spl=40;spl<=100;spl+=10){
    RefreshParameters()
    ANFilterBankRun()
    //SaveANFilterBank2File()
    //for i=0,nchannels-1 golgi[i][0].SetRate2()
    //SaveGolgiFilterBank2File()
    SetInputRates()	
    ClearSpikes()
    for irep=0,reps-1{
		GenInputSpikes()
        SaveSpikes()
    }	
	ANSpikes()
	for j=0,nchannels-1 {
			meanrate(golgi[j][0].spikes)
			grate[j].append(golgi[j][0].spikes.size / (reps * 0.05))
			for i=1,HSRsperchannel-1 an.HSRspikes[j][0].append(an.HSRspikes[j][i])
			for i=1,LSRsperchannel-1 an.LSRspikes[j][0].append(an.LSRspikes[j][i])
			meanrate(an.HSRspikes[j][0])
			meanrate(an.LSRspikes[j][0])
			hsrrate[j].append(an.HSRspikes[j][0].size / (HSRsperchannel * reps * 0.05))
			lsrrate[j].append(an.LSRspikes[j][0].size / (LSRsperchannel * reps * 0.05))
		}
	} 
    fitgr.erase_all()
    hsrrate[whichcell].plot(fitgr,10,1,1)
    lsrrate[whichcell].plot(fitgr,10,2,1)
    grate[whichcell].plot(fitgr,10,3,1)
}

objref myg,myn
proc PlotRLs(){
	myg = new Graph()
	myn = new Graph()
	for i=3,6 toneRL[i].plot(myg,toneRL[0])
	for i=1,2 toneRL[i].plot(myg,toneRL[0],2,2)
	for i=0,1 target_rate_level[i].plot(myg,toneRL[0],3,3)
	for i=3,6 noiseRL[i].plot(myn,noiseRL[0])
	for i=1,2 noiseRL[i].plot(myn,noiseRL[0],2,2)
	for i=2,3 target_rate_level[i].plot(myn,noiseRL[0],3,3)
	myg.exec_menu("View = plot")
	myn.exec_menu("View = plot")
}

xopen("TV_RateLevel.ses")
